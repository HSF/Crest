openapi: 3.0.0
info:
  version: '5.0'
  title: CREST Server
  description: OpenApi3 for CREST Server
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - url: 'https://crest-undertow.web.cern.ch/api'
security:
  - BearerAuth: []
  - OpenID:
      - openid
tags:
  - name: admin
  - name: folders
  - name: globaltagmaps
  - name: globaltags
  - name: tags
  - name: iovs
  - name: monitoring
  - name: payloads
  - name: runinfo
paths:
  '/admin/globaltags/{name}':
    put:
      tags:
        - admin
      summary: Update a GlobalTag in the database.
      description: 'This method allows to update a GlobalTag.Arguments: the name has to uniquely identify a global tag.'
      operationId: updateGlobalTag
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GlobalTagDto'
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalTagDto'
    delete:
      tags:
        - admin
      summary: Remove a GlobalTag from the database.
      description: 'This method allows to remove a GlobalTag.Arguments: the name has to uniquely identify a global tag.'
      operationId: removeGlobalTag
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
        '404':
          $ref: '#/components/responses/404'
        default:
          $ref: '#/components/responses/genericError'
  '/admin/tags/{name}':
    delete:
      tags:
        - admin
      summary: Remove a Tag from the database.
      description: 'This method allows to remove a Tag.Arguments: the name has to uniquely identify a tag.'
      operationId: removeTag
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
        '404':
          $ref: '#/components/responses/404'
        default:
          $ref: '#/components/responses/genericError'
  /folders:
    post:
      tags:
        - folders
      summary: Create an entry for folder information.
      description: Folder informations go into a dedicated table.
      operationId: createFolder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FolderDto'
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FolderDto'
    get:
      tags:
        - folders
      summary: Finds a FolderDto list.
      description: 'This method allows to perform search and sorting.Arguments: by=<pattern>, sort=<sortpattern>. The pattern <pattern> is in the form <param-name><operation><param-value>       <param-name> is the name of one of the fields in the dto       <operation> can be [< : >] ; for string use only [:]        <param-value> depends on the chosen parameter. A list of this criteria can be provided       using comma separated strings for <pattern>.      The pattern <sortpattern> is <field>:[DESC|ASC]'
      operationId: listFolders
      parameters:
        - name: schema
          in: query
          description: 'the schema pattern {none}'
          required: false
          schema:
            type: string
            default: none
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FolderSetDto'
  /globaltagmaps:
    post:
      tags:
        - globaltagmaps
      summary: Create a GlobalTagMap in the database.
      description: 'This method allows to insert a GlobalTagMap.Arguments: GlobalTagMapDto should be provided in the body as a JSON file.'
      operationId: createGlobalTagMap
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GlobalTagMapDto'
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalTagMapDto'
        default:
          $ref: '#/components/responses/genericError'
  '/globaltagmaps/{name}':
    get:
      tags:
        - globaltagmaps
      summary: Find GlobalTagMapDto lists.
      description: This method search for mappings using the global tag name.
      operationId: findGlobalTagMap
      parameters:
        - name: X-Crest-MapMode
          in: header
          description: If the mode is BackTrace then it will search for global tags containing the tag <name>
          schema:
            default: Trace
            type: string
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalTagMapSetDto'
        '404':
          $ref: '#/components/responses/404'
        default:
          $ref: '#/components/responses/genericError'
    delete:
      tags:
        - globaltagmaps
      summary: Delete GlobalTagMapDto lists.
      description: This method search for mappings using the global tag name and deletes all mappings.
      operationId: deleteGlobalTagMap
      parameters:
        - name: name
          in: path
          description: the global tag name
          required: true
          schema:
            type: string
        - name: label
          in: query
          description: 'label: the generic name labelling all tags of a certain kind.'
          required: true
          schema:
            type: string
            default: none
        - name: record
          in: query
          description: 'record: the record.'
          required: false
          schema:
            type: string
        - name: tagname
          in: query
          description: 'tagname: the name of the tag associated.'
          required: true
          schema:
            type: string
            default: none
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalTagMapSetDto'
        '404':
          $ref: '#/components/responses/404'
        default:
          $ref: '#/components/responses/genericError'
  /globaltags:
    get:
      tags:
        - globaltags
      summary: Finds a GlobalTagDtos lists.
      description: |
        This method allows to perform search and sorting.
        Arguments: name=<pattern>, workflow, scenario, release, validity, description
        page={ipage}, size={isize}, sort=<sortpattern>.
      operationId: listGlobalTags
      parameters:
        - name: name
          in: query
          description: 'the global tag name search pattern {none}'
          required: false
          schema:
            type: string
            default: all
        - name: workflow
          in: query
          description: 'the global tag workflow search pattern {none}'
          required: false
          schema:
            type: string
        - name: scenario
          in: query
          description: 'the global tag scenario search pattern {none}'
          required: false
          schema:
            type: string
        - name: release
          in: query
          description: 'the global tag release search pattern {none}'
          required: false
          schema:
            type: string
        - name: validity
          in: query
          description: 'the global tag validity low limit {x>=validity}'
          required: false
          schema:
            type: integer
            format: int64
        - name: description
          in: query
          description: 'the global tag description search pattern {none}'
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'page: the page number {0}'
          required: false
          schema:
            type: integer
            default: 0
            format: int32
        - name: size
          in: query
          description: 'size: the page size {1000}'
          required: false
          schema:
            type: integer
            default: 1000
            format: int32
        - name: sort
          in: query
          description: 'sort: the sort pattern {name:ASC}'
          required: false
          schema:
            type: string
            default: 'name:ASC'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalTagSetDto'
        '404':
          $ref: '#/components/responses/404'
        default:
          $ref: '#/components/responses/genericError'
    post:
      tags:
        - globaltags
      summary: Create a GlobalTag in the database.
      description: 'This method allows to insert a GlobalTag.Arguments: GlobalTagDto should be provided in the body as a JSON file.'
      operationId: createGlobalTag
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GlobalTagDto'
      parameters:
        - name: force
          in: query
          description: 'force: tell the server if it should use or not the insertion time provided {default: false}'
          required: false
          schema:
            type: string
            default: false
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalTagDto'
        default:
          $ref: '#/components/responses/genericError'
  '/globaltags/{name}':
    get:
      tags:
        - globaltags
      summary: Finds a GlobalTagDto by name
      description: This method will search for a global tag with the given name. Only one global tag should be returned.
      operationId: findGlobalTag
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalTagSetDto'
        '404':
          $ref: '#/components/responses/404'
        default:
          $ref: '#/components/responses/genericError'
  '/globaltags/{name}/tags':
    get:
      tags:
        - globaltags
      summary: Finds a TagDtos lists associated to the global tag name in input.
      description: 'This method allows to trace a global tag.Arguments: record=<record> filter output by record, label=<label> filter output by label'
      operationId: findGlobalTagFetchTags
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: record
          in: query
          description: 'record:  the record string {}'
          required: false
          schema:
            type: string
            default: none
        - name: label
          in: query
          description: 'label:  the label string {}'
          required: false
          schema:
            type: string
            default: none
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagSetDto'
        '404':
          $ref: '#/components/responses/404'
        default:
          $ref: '#/components/responses/genericError'
  /tags:
    get:
      tags:
        - tags
      summary: Finds a TagDtos lists.
      description: |
        This method allows to perform search and sorting.
        Arguments: name=<pattern>, objectType, timeType, description
        page={ipage}, size={isize}, sort=<sortpattern>.
      operationId: listTags
      parameters:
        - name: name
          in: query
          description: 'the tag name search pattern {all}'
          required: false
          schema:
            type: string
            default: all
        - name: timeType
          in: query
          description: 'the tag timeType {none}'
          required: false
          schema:
            type: string
        - name: objectType
          in: query
          description: 'the tag objectType search pattern {none}'
          required: false
          schema:
            type: string
        - name: description
          in: query
          description: 'the global tag description search pattern {none}'
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'page: the page number {0}'
          required: false
          schema:
            type: integer
            default: 0
            format: int32
        - name: size
          in: query
          description: 'size: the page size {1000}'
          required: false
          schema:
            type: integer
            default: 1000
            format: int32
        - name: sort
          in: query
          description: 'sort: the sort pattern {name:ASC}'
          required: false
          schema:
            type: string
            default: 'name:ASC'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagSetDto'
        '404':
          $ref: '#/components/responses/404'
        default:
          $ref: '#/components/responses/genericError'
    post:
      tags:
        - tags
      summary: Create a Tag in the database.
      description: 'This method allows to insert a Tag.Arguments: TagDto should be provided in the body as a JSON file.'
      operationId: createTag
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagDto'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagDto'
        default:
          $ref: '#/components/responses/genericError'
  '/tags/{name}':
    get:
      tags:
        - tags
      summary: Finds a TagDto by name
      description: This method will search for a tag with the given name. Only one tag should be returned.
      operationId: findTag
      parameters:
        - name: name
          in: path
          description: 'name: the tag name'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagSetDto'
        '404':
          $ref: '#/components/responses/404'
        default:
          $ref: '#/components/responses/genericError'
    put:
      tags:
        - tags
      summary: Update a TagDto by name
      description: 'This method will search for a tag with the given name, and update its content for the provided body fields. Only the following fields can be updated: description, timeType, objectTime, endOfValidity, lastValidatedTime.'
      operationId: updateTag
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenericMap'
      parameters:
        - name: name
          in: path
          description: 'name: the tag name'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagDto'
        '404':
          $ref: '#/components/responses/404'
        default:
          $ref: '#/components/responses/genericError'
  '/tags/{name}/meta':
    get:
      tags:
        - tags
      summary: Finds a TagMetaDto by name
      description: This method will search for a tag metadata with the given name. Only one tag should be returned.
      operationId: findTagMeta
      parameters:
        - name: name
          in: path
          description: 'name: the tag name'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagMetaSetDto'
        '404':
          $ref: '#/components/responses/404'
        default:
          $ref: '#/components/responses/genericError'
    post:
      tags:
        - tags
      summary: Create a TagMeta in the database.
      description: 'This method allows to insert a TagMeta.Arguments: TagMetaDto should be provided in the body as a JSON file.'
      operationId: createTagMeta
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagMetaDto'
      parameters:
        - name: name
          in: path
          description: 'name: the tag name'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagMetaDto'
        '404':
          $ref: '#/components/responses/404'
        default:
          $ref: '#/components/responses/genericError'
    put:
      tags:
        - tags
      summary: Update a TagMetaDto by name
      description: 'This method will search for a tag with the given name, and update its content for the provided body fields. Only the following fields can be updated: description, timeType, objectTime, endOfValidity, lastValidatedTime.'
      operationId: updateTagMeta
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenericMap'
      parameters:
        - name: name
          in: path
          description: 'name: the tag name'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagMetaDto'
            application/xml:
              schema:
                $ref: '#/components/schemas/TagMetaDto'
        '404':
          $ref: '#/components/responses/404'
        default:
          $ref: '#/components/responses/genericError'
  /iovs:
    get:
      tags:
        - iovs
      summary: Finds a IovDtos lists.
      description: |
        Retrieves IOVs, with parameterizable method and arguments
      operationId: findAllIovs
      parameters:
        - name: method
          in: query
          description: |
            the method used will determine which query is executed
            IOVS, RANGE and AT is a standard IOV query requiring a precise tag name
            GROUPS is a group query type
          required: true
          schema:
            type: string
            enum:
              - IOVS
              - GROUPS
              - MONITOR
            default: IOVS
        - name: tagname
          in: query
          description: the tag name
          required: false
          schema:
            type: string
            default: none
        - name: snapshot
          in: query
          description: 'snapshot: the snapshot time {0}'
          required: false
          schema:
            type: integer
            default: 0
            format: int64
        - name: since
          in: query
          description: 'the since time as a string {0}'
          required: false
          schema:
            type: string
            default: 0
        - name: until
          in: query
          description: 'the until time as a string {INF}'
          required: false
          schema:
            type: string
            default: INF
        - name: timeformat
          in: query
          description: |
            the format for since and until {number | ms | iso | run-lumi | custom (yyyyMMdd'T'HHmmssX)}
            If timeformat is equal number, we just parse the argument as a long.
          required: false
          schema:
            type: string
            enum:
              - NUMBER
              - MS
              - ISO
              - RUN
              - RUN_LUMI
              - CUSTOM
            default: NUMBER
        - name: groupsize
          in: query
          description: |
            The group size represent the pagination type provided for GROUPS query method.
          required: false
          schema:
            type: integer
            format: int64
        - name: hash
          in: query
          description: |
            the hash for searching specific IOV list for a given hash.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'the page number {0}'
          required: false
          schema:
            type: integer
            default: 0
            format: int32
        - name: size
          in: query
          description: 'the page size {10000}'
          required: false
          schema:
            type: integer
            default: 10000
            format: int32
        - name: sort
          in: query
          description: 'the sort pattern {id.since:ASC}'
          required: false
          schema:
            type: string
            default: 'id.since:ASC'
        - name: X-Crest-Query
          in: header
          description: |
            The query type. The header parameter X-Crest-Query can be : iovs, ranges, at.
            The iovs represents an exclusive interval, while ranges and at include previous since.
            This has an impact on how the since and until ranges are applied.
          schema:
            enum:
              - IOVS
              - RANGES
              - AT
            default: IOVS
            type: string
        - name: X-Crest-Since
          in: header
          description: |
            The since type required in the query. It can be : ms, cool.
            Since and until will be transformed in these units.
            It differs from timeformat which indicates how to interpret the since and until
            strings in input.
          schema:
            type: string
            enum:
              - MS
              - COOL
              - NUMBER
            default: NUMBER
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IovSetDto'
        '404':
          $ref: '#/components/responses/404'
        default:
          $ref: '#/components/responses/genericError'
    post:
      tags:
        - iovs
      summary: 'Create IOVs in the database, associated to a tag name.'
      description: |
        Insert a list of Iovs using an IovSetDto in the request body. It is mandatory
        to provide an existing tag in input. The referenced payloads should already exists in the DB.
      operationId: storeIovBatch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IovSetDto'
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IovSetDto'
        default:
          $ref: '#/components/responses/genericError'
    put:
      tags:
        - iovs
      summary: 'Create a single IOV in the database, associated to a tag name.'
      description: |
        Insert an Iov using an IovDto in the request body. It is mandatory
        to provide an existing tag in input. The referenced payloads should already exists in the DB.
      operationId: storeIovOne
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IovDto'
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IovSetDto'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        default:
          $ref: '#/components/responses/genericError'
  /iovs/infos:
    get:
      tags:
        - iovs
      summary: Select iovs and payload meta info for a given tagname and in a given range.
      description: |
        Retrieve a list of iovs with payload metadata associated. The arguments are:
        tagname={a tag name}, since={since time as string}, until={until time as string}, snapshot={snapshot time as long}'
        and timeformat={format of since/until}.
      operationId: selectIovPayloads
      parameters:
        - name: tagname
          in: query
          description: the tag name
          required: true
          schema:
            type: string
            default: none
        - name: since
          in: query
          description: 'the since time as a string {0}'
          required: false
          schema:
            type: string
            default: 0
        - name: until
          in: query
          description: 'the until time as a string {INF}'
          required: false
          schema:
            type: string
            default: INF
        - name: timeformat
          in: query
          description: |
            the format for since and until {number | ms | iso | custom (yyyyMMdd'T'HHmmssX)}
            If timeformat is equal number, we just parse the argument as a long.
          required: false
          schema:
            type: string
            default: number
        - name: page
          in: query
          description: 'the page number {0}'
          required: false
          schema:
            type: integer
            default: 0
            format: int32
        - name: size
          in: query
          description: 'the page size {10000}'
          required: false
          schema:
            type: integer
            default: 10000
            format: int32
        - name: sort
          in: query
          description: 'the sort pattern {id.since:ASC}'
          required: false
          schema:
            type: string
            default: 'id.since:ASC'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IovPayloadSetDto'
        '404':
          $ref: '#/components/responses/404'
        default:
          $ref: '#/components/responses/genericError'
  /iovs/size:
    get:
      tags:
        - iovs
      summary: Get the number o iovs for tags matching pattern.
      description: |
        This method allows to retrieve the number of iovs in a tag (or pattern).
      operationId: getSizeByTag
      parameters:
        - name: tagname
          in: query
          description: 'the tag name, can be a pattern like MDT%'
          required: true
          schema:
            type: string
            default: none
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagSummarySetDto'
        '404':
          $ref: '#/components/responses/404'
        default:
          $ref: '#/components/responses/genericError'
  /payloads:
    post:
      tags:
        - payloads
      summary: 'Create Payloads in the database, associated to a given iov since list and tag name.'
      description: |
        This method allows to insert list of Payloads and IOVs.
        Payload can be contained in the HASH of the IOV (in case it is a small JSON)
        or as a reference to external file (FILE).
        In the first case, the files list can be null.
        Arguments: tag,version,endtime,objectType,compressionType
        The header parameter X-Crest-PayloadFormat can be FILE or JSON
      operationId: storePayloadBatch
      parameters:
        - in: header
          name: X-Crest-PayloadFormat
          description: |
            The format of the input data. StoreSetDto entries will have either the content inline (JSON)
            or stored via external files (FILE).
          schema:
            type: string
            enum:
              - FILE
              - JSON
            default: FILE
      requestBody:
        description: A json string that is used to construct the form data object.
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                tag:
                  description: The tag name
                  type: string
                storeset:
                  description: the string representing a StoreSetDto in json
                  type: string
                files:
                  description: The payload files as an array of streams
                  type: array
                  items:
                    type: string
                    format: binary
                objectType:
                  description: The object type
                  type: string
                compressionType:
                  description: The compression type
                  type: string
                version:
                  description: The version
                  type: string
                endtime:
                  description: The tag end time. This represents a number.
                  type: string
              required:
                - storeset
                - tag
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreSetDto'
            application/xml:
              schema:
                $ref: '#/components/schemas/StoreSetDto'
        default:
          $ref: '#/components/responses/genericError'
    get:
      tags:
        - payloads
      summary: Finds Payloads metadata.
      description: |
        This method allows to perform search and sorting.
        Arguments: hash=<the payload hash>, minsize=<min size>, objectType=<the type>
        page={ipage}, size={isize}, sort=<sortpattern>.
      operationId: listPayloads
      parameters:
        - name: hash
          in: query
          description: 'the hash to search {none}'
          required: false
          schema:
            type: string
        - name: objectType
          in: query
          description: the objectType to search
          required: false
          schema:
            type: string
        - name: minsize
          in: query
          description: the minimum size to search
          required: false
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: 'page: the page number {0}'
          required: false
          schema:
            type: integer
            default: 0
            format: int32
        - name: size
          in: query
          description: 'size: the page size {1000}'
          required: false
          schema:
            type: integer
            default: 1000
            format: int32
        - name: sort
          in: query
          description: 'sort: the sort pattern {insertionTime:DESC}'
          required: false
          schema:
            type: string
            default: 'insertionTime:DESC'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayloadSetDto'
        '404':
          $ref: '#/components/responses/404'
        default:
          $ref: '#/components/responses/genericError'
    put:
      tags:
        - payloads
      summary: Upload and process large JSON data.
      operationId: uploadJson
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                tag:
                  description: The tag name
                  type: string
                storeset:
                  description: the string representing a StoreSetDto in json
                  type: string
                  format: binary
                objectType:
                  description: The object type
                  type: string
                compressionType:
                  description: The compression type
                  type: string
                version:
                  description: The version
                  type: string
                endtime:
                  description: 'The tag end time, represent a number.'
                  type: string
              required:
                - storeset
                - tag
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreSetDto'
            application/xml:
              schema:
                $ref: '#/components/schemas/StoreSetDto'
        default:
          $ref: '#/components/responses/genericError'
  /payloads/data:
    get:
      tags:
        - payloads
      summary: Finds a payload resource associated to the hash.
      description: |
        This method retrieves a payload resource.
        Arguments: hash=<hash> the hash of the payload
        Depending on the header, this method will either retrieve the data, the metadata of the payload 
        or the streamerInfo alone.
      operationId: getPayload
      parameters:
        - name: hash
          in: query
          description: 'hash:  the hash of the payload'
          required: true
          schema:
            type: string
        - name: format
          in: query
          description: |
            The format of the output data. 
            It can be : BLOB (default), META (meta data) or STREAMER (streamerInfo).
          required: true
          schema:
            type: string
            enum:
              - BLOB
              - META
              - STREAMER
            default: BLOB
      responses:
        '200':
          description: successful operation
          content:
            application/octet-stream:
              schema:
                type: string
            application/json:
              schema:
                $ref: '#/components/schemas/PayloadDto'
        '404':
          $ref: '#/components/responses/404'
        default:
          $ref: '#/components/responses/genericError'
    put:
      tags:
        - payloads
      summary: Update a streamerInfo in a payload
      description: |
        This method will update the streamerInfo.
        This is provided via a generic map in the request body containing the key 'streamerInfo'
      operationId: updatePayload
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenericMap'
      parameters:
        - name: hash
          in: path
          description: 'hash:  the hash of the payload'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayloadDto'
            application/xml:
              schema:
                $ref: '#/components/schemas/PayloadDto'
        '404':
          $ref: '#/components/responses/404'
        default:
          $ref: '#/components/responses/genericError'
  /monitoring/payloads:
    get:
      tags:
        - monitoring
      summary: Retrieves monitoring information on payload as a list of PayloadTagInfoDtos.
      description: 'This method allows to perform search and sorting.Arguments: tagname=<pattern>, page={ipage}, size={isize}, sort=<sortpattern>. The pattern <pattern> is in the form <param-name><operation><param-value>       <param-name> is the name of one of the fields in the dto       <operation> can be [< : >] ; for string use only [:]        <param-value> depends on the chosen parameter. A list of this criteria can be provided       using comma separated strings for <pattern>.      The pattern <sortpattern> is <field>:[DESC|ASC]'
      operationId: listPayloadTagInfo
      parameters:
        - name: tagname
          in: query
          description: 'tagname: the search pattern {none}'
          required: false
          schema:
            type: string
            default: none
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayloadTagInfoSetDto'
        '404':
          $ref: '#/components/responses/404'
        default:
          $ref: '#/components/responses/genericError'
  /runinfo:
    post:
      tags:
        - runinfo
      summary: Create an entry for run information.
      description: Run informations go into a separate table.
      operationId: createRunInfo
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RunLumiSetDto'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunLumiSetDto'
    put:
      tags:
        - runinfo
      summary: Update an entry for run information.
      description: 'Run informations go into a separate table. To update an entry, the run number and the lumi section must be provided.'
      operationId: updateRunInfo
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RunLumiInfoDto'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunLumiSetDto'
    get:
      tags:
        - runinfo
      summary: Finds a RunLumiInfoDto lists using parameters.
      description: 'This method allows to perform search.Arguments: from=<someformat>,to=<someformat>, format=<describe previous types>, page={ipage}, size={isize}, sort=<sortpattern>. The pattern <pattern> is in the form <param-name><operation><param-value>       <param-name> is the name of one of the fields in the dto       <operation> can be [< : >] ; for string use only [:]        <param-value> depends on the chosen parameter. A list of this criteria can be provided       using comma separated strings for <pattern>.      The pattern <sortpattern> is <field>:[DESC|ASC]'
      operationId: listRunInfo
      parameters:
        - name: since
          in: query
          description: 'since: the starting time or run-lumi'
          required: false
          schema:
            type: string
            default: none
        - name: until
          in: query
          description: 'until: the ending time or run-lumi'
          required: false
          schema:
            type: string
            default: none
        - name: format
          in: query
          description: |
            the format to digest previous arguments [iso], [number], [run-lumi].
            Time(iso) = yyyymmddhhmiss, 
            Time(number) = milliseconds or Run(number) = runnumber
            Run(run-lumi) = runnumber-lumisection
          required: false
          schema:
            type: string
            default: number
        - name: mode
          in: query
          description: |
            the mode for the request : [daterange] or [runrange]
          required: false
          schema:
            type: string
            enum:
              - daterange
              - runrange
            default: runrange
        - name: page
          in: query
          description: 'page: the page number {0}'
          required: false
          schema:
            type: integer
            default: 0
            format: int32
        - name: size
          in: query
          description: 'size: the page size {1000}'
          required: false
          schema:
            type: integer
            default: 1000
            format: int32
        - name: sort
          in: query
          description: 'sort: the sort pattern {id.runNumber:ASC}'
          required: false
          schema:
            type: string
            default: 'id.runNumber:ASC'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunLumiSetDto'
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
    OpenID:
      type: openIdConnect
      openIdConnectUrl: 'https://auth.cern.ch/auth/realms/cern/.well-known/openid-configuration'
  requestBodies:
    GenericMapBody:
      description: A JSON object containing generic map used for updates
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenericMap'
  responses:
    '400':
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPResponse'
    '404':
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPResponse'
    '409':
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPResponse'
    genericError:
      description: Generic error response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPResponse'
  schemas:
    HTTPResponse:
      description: general response object that can be used for POST and PUT methods
      type: object
      required:
        - code
        - message
      properties:
        timestamp:
          type: string
          format: date-time
        code:
          type: integer
          description: HTTP status code of the response
        error:
          type: string
        type:
          type: string
          description: A generic string specifying the exception type.
        message:
          type: string
        id:
          type: string
          description: path or URI of the requested or generated resource
    CrestBaseResponse:
      type: object
      required:
        - size
        - format
      properties:
        size:
          type: integer
          format: int64
        datatype:
          type: string
        format:
          type: string
        page:
          $ref: '#/components/schemas/RespPage'
        filter:
          $ref: '#/components/schemas/GenericMap'
      discriminator:
        propertyName: format
    RespPage:
      type: object
      required:
        - size
        - totalElements
        - totalPages
        - number
      properties:
        size:
          type: integer
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
        number:
          type: integer
    GenericMap:
      type: object
      properties:
        name:
          type: string
      additionalProperties:
        type: string
    TagDto:
      type: object
      properties:
        name:
          type: string
        timeType:
          type: string
        payloadSpec:
          type: string
        synchronization:
          type: string
        description:
          type: string
        lastValidatedTime:
          type: integer
          format: int64
        endOfValidity:
          type: integer
          format: int64
        insertionTime:
          type: string
          format: date-time
        modificationTime:
          type: string
          format: date-time
    TagSetDto:
      description: An Set containing TagDto objects.
      properties:
        resources:
          type: array
          items:
            $ref: '#/components/schemas/TagDto'
      allOf:
        - $ref: '#/components/schemas/CrestBaseResponse'
    TagMetaSetDto:
      description: An Set containing TagMetaDto objects.
      properties:
        resources:
          type: array
          items:
            $ref: '#/components/schemas/TagMetaDto'
      allOf:
        - $ref: '#/components/schemas/CrestBaseResponse'
    TagMetaDto:
      type: object
      properties:
        tagName:
          type: string
        description:
          type: string
        chansize:
          type: integer
          format: int32
        colsize:
          type: integer
          format: int32
        tagInfo:
          type: string
        insertionTime:
          type: string
          format: date-time
    GlobalTagDto:
      type: object
      properties:
        name:
          type: string
        validity:
          type: integer
          format: int64
        description:
          type: string
        release:
          type: string
        insertionTime:
          type: string
          format: date-time
        snapshotTime:
          type: string
          format: date-time
        scenario:
          type: string
        workflow:
          type: string
        type:
          type: string
        snapshotTimeMilli:
          type: integer
          format: int64
        insertionTimeMilli:
          type: integer
          format: int64
    FolderDto:
      type: object
      properties:
        nodeFullpath:
          type: string
        schemaName:
          type: string
        nodeName:
          type: string
        nodeDescription:
          type: string
        tagPattern:
          type: string
        groupRole:
          type: string
    FolderSetDto:
      description: An FolderSet containing FolderDto objects.
      properties:
        resources:
          type: array
          items:
            $ref: '#/components/schemas/FolderDto'
      allOf:
        - $ref: '#/components/schemas/CrestBaseResponse'
    GlobalTagMapSetDto:
      description: An GlobalTagMapSet containing GlobalTagMapDto objects.
      properties:
        resources:
          type: array
          items:
            $ref: '#/components/schemas/GlobalTagMapDto'
      allOf:
        - $ref: '#/components/schemas/CrestBaseResponse'
    GlobalTagMapDto:
      type: object
      properties:
        globalTagName:
          type: string
        record:
          type: string
        label:
          type: string
        tagName:
          type: string
    GlobalTagSetDto:
      description: An GlobalTagSet containing GlobalTagDto objects.
      properties:
        resources:
          type: array
          items:
            $ref: '#/components/schemas/GlobalTagDto'
      allOf:
        - $ref: '#/components/schemas/CrestBaseResponse'
    IovDto:
      type: object
      required:
        - since
        - payloadHash
      properties:
        tagName:
          type: string
        since:
          type: integer
          format: int64
        insertionTime:
          type: string
          format: date-time
        payloadHash:
          type: string
    IovSetDto:
      description: An Set containing IovDto objects.
      properties:
        resources:
          type: array
          items:
            $ref: '#/components/schemas/IovDto'
      allOf:
        - $ref: '#/components/schemas/CrestBaseResponse'
    IovPayloadSetDto:
      description: An Set containing IovPayloadDto objects.
      properties:
        resources:
          type: array
          items:
            $ref: '#/components/schemas/IovPayloadDto'
      allOf:
        - $ref: '#/components/schemas/CrestBaseResponse'
    IovPayloadDto:
      type: object
      properties:
        since:
          type: number
        insertionTime:
          type: string
          format: date-time
        version:
          type: string
        objectType:
          type: string
        objectName:
          type: string
        compressionType:
          type: string
        size:
          type: integer
          format: int32
        payloadHash:
          type: string
    PayloadSetDto:
      description: An Set containing PayloadDto objects.
      properties:
        resources:
          type: array
          items:
            $ref: '#/components/schemas/PayloadDto'
      allOf:
        - $ref: '#/components/schemas/CrestBaseResponse'
    PayloadDto:
      type: object
      properties:
        hash:
          type: string
        version:
          type: string
        objectType:
          type: string
        objectName:
          type: string
        compressionType:
          type: string
        checkSum:
          type: string
        size:
          type: integer
          format: int32
        insertionTime:
          type: string
          format: date-time
    StoreDto:
      type: object
      properties:
        hash:
          type: string
        since:
          type: integer
          format: int64
        data:
          type: string
        streamerInfo:
          type: string
    StoreSetDto:
      description: An Set containing StoreDto objects.
      properties:
        resources:
          type: array
          items:
            $ref: '#/components/schemas/StoreDto'
      allOf:
        - $ref: '#/components/schemas/CrestBaseResponse'
    PayloadTagInfoSetDto:
      description: An PayloadTagInfoSet containing PayloadTagInfoDto objects.
      properties:
        resources:
          type: array
          items:
            $ref: '#/components/schemas/PayloadTagInfoDto'
      allOf:
        - $ref: '#/components/schemas/CrestBaseResponse'
    PayloadTagInfoDto:
      type: object
      properties:
        tagname:
          type: string
        niovs:
          type: integer
        totvolume:
          type: number
          format: float
        avgvolume:
          type: number
          format: float
    TagSummarySetDto:
      description: An Set containing TagSummaryDto objects.
      properties:
        resources:
          type: array
          items:
            $ref: '#/components/schemas/TagSummaryDto'
      allOf:
        - $ref: '#/components/schemas/CrestBaseResponse'
    TagSummaryDto:
      type: object
      properties:
        tagname:
          type: string
        niovs:
          type: integer
          format: int64
    RunLumiSetDto:
      description: An RunLumiSet containing RunLumiInfoDto objects.
      properties:
        resources:
          type: array
          items:
            $ref: '#/components/schemas/RunLumiInfoDto'
      allOf:
        - $ref: '#/components/schemas/CrestBaseResponse'
    RunLumiInfoDto:
      type: object
      properties:
        runNumber:
          type: number
        lb:
          type: number
        starttime:
          type: number
        endtime:
          type: number
