# coding: utf-8

"""
    CrestDB REST API

    Crest Rest Api to manage data for calibration files.

    OpenAPI spec version: 2.0
    Contact: andrea.formica@cern.ch
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class IovsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create_iov(self, body, **kwargs):
        """
        Create a Iov in the database.
        This method allows to insert a Iov.Arguments: IovDto should be provided in the body as a JSON file.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_iov(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param IovDto body: A json string that is used to construct a iovdto object: { name: xxx, ... } (required)
        :return: IovDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_iov_with_http_info(body, **kwargs)
        else:
            (data) = self.create_iov_with_http_info(body, **kwargs)
            return data

    def create_iov_with_http_info(self, body, **kwargs):
        """
        Create a Iov in the database.
        This method allows to insert a Iov.Arguments: IovDto should be provided in the body as a JSON file.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_iov_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param IovDto body: A json string that is used to construct a iovdto object: { name: xxx, ... } (required)
        :return: IovDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_iov" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_iov`")


        collection_formats = {}

        resource_path = '/iovs'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='IovDto',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def find_all_iovs(self, **kwargs):
        """
        Finds a IovDtos lists.
        This method allows to perform search by tagname and sorting.Arguments: tagname={a tag name}, page={ipage}, size={isize},      sort=<pattern>, where pattern is <field>:[DESC|ASC]
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_all_iovs(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str tagname: tagname: the tag name {none}
        :param int page: page: the page number {0}
        :param int size: size: the page size {10000}
        :param str sort: sort: the sort pattern {id.since:ASC}
        :return: list[IovDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.find_all_iovs_with_http_info(**kwargs)
        else:
            (data) = self.find_all_iovs_with_http_info(**kwargs)
            return data

    def find_all_iovs_with_http_info(self, **kwargs):
        """
        Finds a IovDtos lists.
        This method allows to perform search by tagname and sorting.Arguments: tagname={a tag name}, page={ipage}, size={isize},      sort=<pattern>, where pattern is <field>:[DESC|ASC]
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_all_iovs_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str tagname: tagname: the tag name {none}
        :param int page: page: the page number {0}
        :param int size: size: the page size {10000}
        :param str sort: sort: the sort pattern {id.since:ASC}
        :return: list[IovDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tagname', 'page', 'size', 'sort']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_all_iovs" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        resource_path = '/iovs'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'tagname' in params:
            query_params['tagname'] = params['tagname']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'size' in params:
            query_params['size'] = params['size']
        if 'sort' in params:
            query_params['sort'] = params['sort']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[IovDto]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_size(self, tagname, **kwargs):
        """
        Get the number o iovs for the given tag.
        This method allows to select the count of iovs in a tag. Also possible to get the size of snapshot, if the time added.Arguments: tagname={a tag name}, snapshotTime={snapshot time in milliseconds (Long) from epoch}
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_size(tagname, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str tagname: tagname: the tag name {none} (required)
        :param int snapshot: snapshot: the snapshot time {0}
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_size_with_http_info(tagname, **kwargs)
        else:
            (data) = self.get_size_with_http_info(tagname, **kwargs)
            return data

    def get_size_with_http_info(self, tagname, **kwargs):
        """
        Get the number o iovs for the given tag.
        This method allows to select the count of iovs in a tag. Also possible to get the size of snapshot, if the time added.Arguments: tagname={a tag name}, snapshotTime={snapshot time in milliseconds (Long) from epoch}
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_size_with_http_info(tagname, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str tagname: tagname: the tag name {none} (required)
        :param int snapshot: snapshot: the snapshot time {0}
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tagname', 'snapshot']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_size" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tagname' is set
        if ('tagname' not in params) or (params['tagname'] is None):
            raise ValueError("Missing the required parameter `tagname` when calling `get_size`")


        collection_formats = {}

        resource_path = '/iovs/getSize'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'tagname' in params:
            query_params['tagname'] = params['tagname']
        if 'snapshot' in params:
            query_params['snapshot'] = params['snapshot']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='int',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_size_by_tag(self, tagname, **kwargs):
        """
        Get the number o iovs for tags matching pattern.
        This method allows to select the count of iovs in a tag. Also possible to get the size of snapshot, if the time added.Arguments: tagname={a tag name}
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_size_by_tag(tagname, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str tagname: tagname: the tag name {none} (required)
        :return: list[TagSummaryDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_size_by_tag_with_http_info(tagname, **kwargs)
        else:
            (data) = self.get_size_by_tag_with_http_info(tagname, **kwargs)
            return data

    def get_size_by_tag_with_http_info(self, tagname, **kwargs):
        """
        Get the number o iovs for tags matching pattern.
        This method allows to select the count of iovs in a tag. Also possible to get the size of snapshot, if the time added.Arguments: tagname={a tag name}
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_size_by_tag_with_http_info(tagname, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str tagname: tagname: the tag name {none} (required)
        :return: list[TagSummaryDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tagname']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_size_by_tag" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tagname' is set
        if ('tagname' not in params) or (params['tagname'] is None):
            raise ValueError("Missing the required parameter `tagname` when calling `get_size_by_tag`")


        collection_formats = {}

        resource_path = '/iovs/getSizeByTag'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'tagname' in params:
            query_params['tagname'] = params['tagname']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[TagSummaryDto]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def select_groups(self, tagname, **kwargs):
        """
        Select groups for a given tagname.
        This method allows to select a list of groups.Arguments: tagname={a tag name}, snapshot={snapshot time as long}
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.select_groups(tagname, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str tagname: tagname: the tag name {none} (required)
        :param int snapshot: snapshot: the snapshot time {0}
        :return: GroupDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.select_groups_with_http_info(tagname, **kwargs)
        else:
            (data) = self.select_groups_with_http_info(tagname, **kwargs)
            return data

    def select_groups_with_http_info(self, tagname, **kwargs):
        """
        Select groups for a given tagname.
        This method allows to select a list of groups.Arguments: tagname={a tag name}, snapshot={snapshot time as long}
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.select_groups_with_http_info(tagname, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str tagname: tagname: the tag name {none} (required)
        :param int snapshot: snapshot: the snapshot time {0}
        :return: GroupDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tagname', 'snapshot']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method select_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tagname' is set
        if ('tagname' not in params) or (params['tagname'] is None):
            raise ValueError("Missing the required parameter `tagname` when calling `select_groups`")


        collection_formats = {}

        resource_path = '/iovs/selectGroups'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'tagname' in params:
            query_params['tagname'] = params['tagname']
        if 'snapshot' in params:
            query_params['snapshot'] = params['snapshot']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GroupDto',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def select_iovs(self, **kwargs):
        """
        Select iovs for a given tagname and in a given range.
        This method allows to select a list of iovs in a tag, using a given range in time and (optionally) for a given snapshot time.Arguments: tagname={a tag name}, since={since time as string}, until={until time as string}, snapshot={snapshot time as long}
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.select_iovs(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str tagname: tagname: the tag name {none}
        :param str since: since: the since time as a string {0}
        :param str until: until: the until time as a string {INF}
        :param int snapshot: snapshot: the snapshot time {0}
        :return: list[IovDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.select_iovs_with_http_info(**kwargs)
        else:
            (data) = self.select_iovs_with_http_info(**kwargs)
            return data

    def select_iovs_with_http_info(self, **kwargs):
        """
        Select iovs for a given tagname and in a given range.
        This method allows to select a list of iovs in a tag, using a given range in time and (optionally) for a given snapshot time.Arguments: tagname={a tag name}, since={since time as string}, until={until time as string}, snapshot={snapshot time as long}
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.select_iovs_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str tagname: tagname: the tag name {none}
        :param str since: since: the since time as a string {0}
        :param str until: until: the until time as a string {INF}
        :param int snapshot: snapshot: the snapshot time {0}
        :return: list[IovDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tagname', 'since', 'until', 'snapshot']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method select_iovs" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        resource_path = '/iovs/selectIovs'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'tagname' in params:
            query_params['tagname'] = params['tagname']
        if 'since' in params:
            query_params['since'] = params['since']
        if 'until' in params:
            query_params['until'] = params['until']
        if 'snapshot' in params:
            query_params['snapshot'] = params['snapshot']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[IovDto]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def select_snapshot(self, tagname, snapshot, **kwargs):
        """
        Select snapshot for a given tagname and insertion time.
        This method allows to select a list of all iovs in a tag, using (optionally) a given snapshot time.Arguments: tagname={a tag name}, snapshot={snapshot time as long}
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.select_snapshot(tagname, snapshot, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str tagname: tagname: the tag name {none} (required)
        :param int snapshot: snapshot: the snapshot time {0} (required)
        :return: list[IovDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.select_snapshot_with_http_info(tagname, snapshot, **kwargs)
        else:
            (data) = self.select_snapshot_with_http_info(tagname, snapshot, **kwargs)
            return data

    def select_snapshot_with_http_info(self, tagname, snapshot, **kwargs):
        """
        Select snapshot for a given tagname and insertion time.
        This method allows to select a list of all iovs in a tag, using (optionally) a given snapshot time.Arguments: tagname={a tag name}, snapshot={snapshot time as long}
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.select_snapshot_with_http_info(tagname, snapshot, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str tagname: tagname: the tag name {none} (required)
        :param int snapshot: snapshot: the snapshot time {0} (required)
        :return: list[IovDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tagname', 'snapshot']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method select_snapshot" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tagname' is set
        if ('tagname' not in params) or (params['tagname'] is None):
            raise ValueError("Missing the required parameter `tagname` when calling `select_snapshot`")
        # verify the required parameter 'snapshot' is set
        if ('snapshot' not in params) or (params['snapshot'] is None):
            raise ValueError("Missing the required parameter `snapshot` when calling `select_snapshot`")


        collection_formats = {}

        resource_path = '/iovs/selectSnapshot'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'tagname' in params:
            query_params['tagname'] = params['tagname']
        if 'snapshot' in params:
            query_params['snapshot'] = params['snapshot']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[IovDto]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
