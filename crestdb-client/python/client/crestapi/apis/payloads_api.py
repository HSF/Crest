# coding: utf-8

"""
    CrestDB REST API

    Crest Rest Api to manage data for calibration files.

    OpenAPI spec version: 2.0
    Contact: andrea.formica@cern.ch
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class PayloadsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create_payload(self, body, **kwargs):
        """
        Create a Payload in the database.
        This method allows to insert a Payload.Arguments: PayloadDto should be provided in the body as a JSON file.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_payload(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PayloadDto body: A json string that is used to construct a iovdto object: { name: xxx, ... } (required)
        :return: PayloadDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_payload_with_http_info(body, **kwargs)
        else:
            (data) = self.create_payload_with_http_info(body, **kwargs)
            return data

    def create_payload_with_http_info(self, body, **kwargs):
        """
        Create a Payload in the database.
        This method allows to insert a Payload.Arguments: PayloadDto should be provided in the body as a JSON file.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_payload_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PayloadDto body: A json string that is used to construct a iovdto object: { name: xxx, ... } (required)
        :return: PayloadDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_payload" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_payload`")


        collection_formats = {}

        resource_path = '/payloads'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PayloadDto',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_payload_multi_form(self, file, payload, **kwargs):
        """
        Create a Payload in the database.
        This method allows to insert a Payload.Arguments: PayloadDto should be provided in the body as a JSON file.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_payload_multi_form(file, payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param file file: The file (required)
        :param str payload: Json body for payloaddto (required)
        :return: PayloadDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_payload_multi_form_with_http_info(file, payload, **kwargs)
        else:
            (data) = self.create_payload_multi_form_with_http_info(file, payload, **kwargs)
            return data

    def create_payload_multi_form_with_http_info(self, file, payload, **kwargs):
        """
        Create a Payload in the database.
        This method allows to insert a Payload.Arguments: PayloadDto should be provided in the body as a JSON file.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_payload_multi_form_with_http_info(file, payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param file file: The file (required)
        :param str payload: Json body for payloaddto (required)
        :return: PayloadDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file', 'payload']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_payload_multi_form" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file' is set
        if ('file' not in params) or (params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `create_payload_multi_form`")
        # verify the required parameter 'payload' is set
        if ('payload' not in params) or (params['payload'] is None):
            raise ValueError("Missing the required parameter `payload` when calling `create_payload_multi_form`")


        collection_formats = {}

        resource_path = '/payloads/upload'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']
        if 'payload' in params:
            form_params.append(('payload', params['payload']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['multipart/form-data'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PayloadDto',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_blob(self, hash, **kwargs):
        """
        Finds payload data by hash; the payload object contains the real BLOB.
        Select one payload at the time, no regexp searches allowed here
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_blob(hash, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str hash: hash of the payload (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_blob_with_http_info(hash, **kwargs)
        else:
            (data) = self.get_blob_with_http_info(hash, **kwargs)
            return data

    def get_blob_with_http_info(self, hash, **kwargs):
        """
        Finds payload data by hash; the payload object contains the real BLOB.
        Select one payload at the time, no regexp searches allowed here
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_blob_with_http_info(hash, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str hash: hash of the payload (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hash']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_blob" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hash' is set
        if ('hash' not in params) or (params['hash'] is None):
            raise ValueError("Missing the required parameter `hash` when calling `get_blob`")


        collection_formats = {}

        resource_path = '/payloads/{hash}/data'.replace('{format}', 'json')
        path_params = {}
        if 'hash' in params:
            path_params['hash'] = params['hash']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/octet-stream'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='str',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_payload(self, hash, **kwargs):
        """
        Finds a payload resource associated to the hash.
        This method retrieves a payload resource.Arguments: hash=<hash> the hash of the payload
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_payload(hash, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str hash: hash:  the hash of the payload (required)
        :return: PayloadDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_payload_with_http_info(hash, **kwargs)
        else:
            (data) = self.get_payload_with_http_info(hash, **kwargs)
            return data

    def get_payload_with_http_info(self, hash, **kwargs):
        """
        Finds a payload resource associated to the hash.
        This method retrieves a payload resource.Arguments: hash=<hash> the hash of the payload
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_payload_with_http_info(hash, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str hash: hash:  the hash of the payload (required)
        :return: PayloadDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hash']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_payload" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hash' is set
        if ('hash' not in params) or (params['hash'] is None):
            raise ValueError("Missing the required parameter `hash` when calling `get_payload`")


        collection_formats = {}

        resource_path = '/payloads/{hash}'.replace('{format}', 'json')
        path_params = {}
        if 'hash' in params:
            path_params['hash'] = params['hash']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PayloadDto',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_payload_meta_info(self, hash, **kwargs):
        """
        Finds a payload resource associated to the hash.
        This method retrieves metadata of the payload resource.Arguments: hash=<hash> the hash of the payload
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_payload_meta_info(hash, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str hash: hash:  the hash of the payload (required)
        :return: PayloadDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_payload_meta_info_with_http_info(hash, **kwargs)
        else:
            (data) = self.get_payload_meta_info_with_http_info(hash, **kwargs)
            return data

    def get_payload_meta_info_with_http_info(self, hash, **kwargs):
        """
        Finds a payload resource associated to the hash.
        This method retrieves metadata of the payload resource.Arguments: hash=<hash> the hash of the payload
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_payload_meta_info_with_http_info(hash, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str hash: hash:  the hash of the payload (required)
        :return: PayloadDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hash']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_payload_meta_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hash' is set
        if ('hash' not in params) or (params['hash'] is None):
            raise ValueError("Missing the required parameter `hash` when calling `get_payload_meta_info`")


        collection_formats = {}

        resource_path = '/payloads/{hash}/meta'.replace('{format}', 'json')
        path_params = {}
        if 'hash' in params:
            path_params['hash'] = params['hash']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PayloadDto',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
