# coding: utf-8

"""
    CrestDB REST API

    Crest Rest Api to manage data for calibration files.  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: andrea.formica@cern.ch
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from crestapi.models.iov_payload_dto import IovPayloadDto  # noqa: F401,E501


class IovSetDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'niovs': 'int',
        'format': 'str',
        'iovs_list': 'list[IovPayloadDto]'
    }

    attribute_map = {
        'niovs': 'niovs',
        'format': 'format',
        'iovs_list': 'iovsList'
    }

    discriminator_value_class_map = {
        
    }

    def __init__(self, niovs=None, format=None, iovs_list=None):  # noqa: E501
        """IovSetDto - a model defined in Swagger"""  # noqa: E501

        self._niovs = None
        self._format = None
        self._iovs_list = None
        self.discriminator = 'format'

        if niovs is not None:
            self.niovs = niovs
        self.format = format
        self.iovs_list = iovs_list

    @property
    def niovs(self):
        """Gets the niovs of this IovSetDto.  # noqa: E501


        :return: The niovs of this IovSetDto.  # noqa: E501
        :rtype: int
        """
        return self._niovs

    @niovs.setter
    def niovs(self, niovs):
        """Sets the niovs of this IovSetDto.


        :param niovs: The niovs of this IovSetDto.  # noqa: E501
        :type: int
        """

        self._niovs = niovs

    @property
    def format(self):
        """Gets the format of this IovSetDto.  # noqa: E501


        :return: The format of this IovSetDto.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this IovSetDto.


        :param format: The format of this IovSetDto.  # noqa: E501
        :type: str
        """
        if format is None:
            raise ValueError("Invalid value for `format`, must not be `None`")  # noqa: E501

        self._format = format

    @property
    def iovs_list(self):
        """Gets the iovs_list of this IovSetDto.  # noqa: E501


        :return: The iovs_list of this IovSetDto.  # noqa: E501
        :rtype: list[IovPayloadDto]
        """
        return self._iovs_list

    @iovs_list.setter
    def iovs_list(self, iovs_list):
        """Sets the iovs_list of this IovSetDto.


        :param iovs_list: The iovs_list of this IovSetDto.  # noqa: E501
        :type: list[IovPayloadDto]
        """
        if iovs_list is None:
            raise ValueError("Invalid value for `iovs_list`, must not be `None`")  # noqa: E501

        self._iovs_list = iovs_list

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.discriminator].lower()
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IovSetDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
