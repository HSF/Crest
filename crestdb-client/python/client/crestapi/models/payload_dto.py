# coding: utf-8

"""
    CrestDB REST API

    Crest Rest Api to manage data for calibration files.  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: andrea.formica@cern.ch
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PayloadDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hash': 'str',
        'version': 'str',
        'object_type': 'str',
        'size': 'int',
        'data': 'str',
        'streamer_info': 'str',
        'insertion_time': 'datetime'
    }

    attribute_map = {
        'hash': 'hash',
        'version': 'version',
        'object_type': 'objectType',
        'size': 'size',
        'data': 'data',
        'streamer_info': 'streamerInfo',
        'insertion_time': 'insertionTime'
    }

    def __init__(self, hash=None, version=None, object_type=None, size=None, data=None, streamer_info=None, insertion_time=None):  # noqa: E501
        """PayloadDto - a model defined in Swagger"""  # noqa: E501

        self._hash = None
        self._version = None
        self._object_type = None
        self._size = None
        self._data = None
        self._streamer_info = None
        self._insertion_time = None
        self.discriminator = None

        if hash is not None:
            self.hash = hash
        if version is not None:
            self.version = version
        if object_type is not None:
            self.object_type = object_type
        if size is not None:
            self.size = size
        if data is not None:
            self.data = data
        if streamer_info is not None:
            self.streamer_info = streamer_info
        if insertion_time is not None:
            self.insertion_time = insertion_time

    @property
    def hash(self):
        """Gets the hash of this PayloadDto.  # noqa: E501


        :return: The hash of this PayloadDto.  # noqa: E501
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this PayloadDto.


        :param hash: The hash of this PayloadDto.  # noqa: E501
        :type: str
        """

        self._hash = hash

    @property
    def version(self):
        """Gets the version of this PayloadDto.  # noqa: E501


        :return: The version of this PayloadDto.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this PayloadDto.


        :param version: The version of this PayloadDto.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def object_type(self):
        """Gets the object_type of this PayloadDto.  # noqa: E501


        :return: The object_type of this PayloadDto.  # noqa: E501
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this PayloadDto.


        :param object_type: The object_type of this PayloadDto.  # noqa: E501
        :type: str
        """

        self._object_type = object_type

    @property
    def size(self):
        """Gets the size of this PayloadDto.  # noqa: E501


        :return: The size of this PayloadDto.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this PayloadDto.


        :param size: The size of this PayloadDto.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def data(self):
        """Gets the data of this PayloadDto.  # noqa: E501


        :return: The data of this PayloadDto.  # noqa: E501
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this PayloadDto.


        :param data: The data of this PayloadDto.  # noqa: E501
        :type: str
        """
        if data is not None and not re.search('^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', data):  # noqa: E501
            raise ValueError("Invalid value for `data`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")  # noqa: E501

        self._data = data

    @property
    def streamer_info(self):
        """Gets the streamer_info of this PayloadDto.  # noqa: E501


        :return: The streamer_info of this PayloadDto.  # noqa: E501
        :rtype: str
        """
        return self._streamer_info

    @streamer_info.setter
    def streamer_info(self, streamer_info):
        """Sets the streamer_info of this PayloadDto.


        :param streamer_info: The streamer_info of this PayloadDto.  # noqa: E501
        :type: str
        """
        if streamer_info is not None and not re.search('^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', streamer_info):  # noqa: E501
            raise ValueError("Invalid value for `streamer_info`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")  # noqa: E501

        self._streamer_info = streamer_info

    @property
    def insertion_time(self):
        """Gets the insertion_time of this PayloadDto.  # noqa: E501


        :return: The insertion_time of this PayloadDto.  # noqa: E501
        :rtype: datetime
        """
        return self._insertion_time

    @insertion_time.setter
    def insertion_time(self, insertion_time):
        """Sets the insertion_time of this PayloadDto.


        :param insertion_time: The insertion_time of this PayloadDto.  # noqa: E501
        :type: datetime
        """

        self._insertion_time = insertion_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PayloadDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PayloadDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
