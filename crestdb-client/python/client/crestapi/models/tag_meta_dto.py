# coding: utf-8

"""
    CrestDB REST API

    Crest Rest Api to manage data for calibration files.  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: andrea.formica@cern.ch
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TagMetaDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tag_name': 'str',
        'description': 'str',
        'chansize': 'int',
        'colsize': 'int',
        'channel_info': 'str',
        'payload_info': 'str',
        'insertion_time': 'datetime'
    }

    attribute_map = {
        'tag_name': 'tagName',
        'description': 'description',
        'chansize': 'chansize',
        'colsize': 'colsize',
        'channel_info': 'channelInfo',
        'payload_info': 'payloadInfo',
        'insertion_time': 'insertionTime'
    }

    def __init__(self, tag_name=None, description=None, chansize=None, colsize=None, channel_info=None, payload_info=None, insertion_time=None):  # noqa: E501
        """TagMetaDto - a model defined in Swagger"""  # noqa: E501

        self._tag_name = None
        self._description = None
        self._chansize = None
        self._colsize = None
        self._channel_info = None
        self._payload_info = None
        self._insertion_time = None
        self.discriminator = None

        if tag_name is not None:
            self.tag_name = tag_name
        if description is not None:
            self.description = description
        if chansize is not None:
            self.chansize = chansize
        if colsize is not None:
            self.colsize = colsize
        if channel_info is not None:
            self.channel_info = channel_info
        if payload_info is not None:
            self.payload_info = payload_info
        if insertion_time is not None:
            self.insertion_time = insertion_time

    @property
    def tag_name(self):
        """Gets the tag_name of this TagMetaDto.  # noqa: E501


        :return: The tag_name of this TagMetaDto.  # noqa: E501
        :rtype: str
        """
        return self._tag_name

    @tag_name.setter
    def tag_name(self, tag_name):
        """Sets the tag_name of this TagMetaDto.


        :param tag_name: The tag_name of this TagMetaDto.  # noqa: E501
        :type: str
        """

        self._tag_name = tag_name

    @property
    def description(self):
        """Gets the description of this TagMetaDto.  # noqa: E501


        :return: The description of this TagMetaDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TagMetaDto.


        :param description: The description of this TagMetaDto.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def chansize(self):
        """Gets the chansize of this TagMetaDto.  # noqa: E501


        :return: The chansize of this TagMetaDto.  # noqa: E501
        :rtype: int
        """
        return self._chansize

    @chansize.setter
    def chansize(self, chansize):
        """Sets the chansize of this TagMetaDto.


        :param chansize: The chansize of this TagMetaDto.  # noqa: E501
        :type: int
        """

        self._chansize = chansize

    @property
    def colsize(self):
        """Gets the colsize of this TagMetaDto.  # noqa: E501


        :return: The colsize of this TagMetaDto.  # noqa: E501
        :rtype: int
        """
        return self._colsize

    @colsize.setter
    def colsize(self, colsize):
        """Sets the colsize of this TagMetaDto.


        :param colsize: The colsize of this TagMetaDto.  # noqa: E501
        :type: int
        """

        self._colsize = colsize

    @property
    def channel_info(self):
        """Gets the channel_info of this TagMetaDto.  # noqa: E501


        :return: The channel_info of this TagMetaDto.  # noqa: E501
        :rtype: str
        """
        return self._channel_info

    @channel_info.setter
    def channel_info(self, channel_info):
        """Sets the channel_info of this TagMetaDto.


        :param channel_info: The channel_info of this TagMetaDto.  # noqa: E501
        :type: str
        """

        self._channel_info = channel_info

    @property
    def payload_info(self):
        """Gets the payload_info of this TagMetaDto.  # noqa: E501


        :return: The payload_info of this TagMetaDto.  # noqa: E501
        :rtype: str
        """
        return self._payload_info

    @payload_info.setter
    def payload_info(self, payload_info):
        """Sets the payload_info of this TagMetaDto.


        :param payload_info: The payload_info of this TagMetaDto.  # noqa: E501
        :type: str
        """

        self._payload_info = payload_info

    @property
    def insertion_time(self):
        """Gets the insertion_time of this TagMetaDto.  # noqa: E501


        :return: The insertion_time of this TagMetaDto.  # noqa: E501
        :rtype: datetime
        """
        return self._insertion_time

    @insertion_time.setter
    def insertion_time(self, insertion_time):
        """Sets the insertion_time of this TagMetaDto.


        :param insertion_time: The insertion_time of this TagMetaDto.  # noqa: E501
        :type: datetime
        """

        self._insertion_time = insertion_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TagMetaDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
