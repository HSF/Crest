# coding: utf-8

"""
    CrestDB REST API

    Crest Rest Api to manage data for calibration files.  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: andrea.formica@cern.ch
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from crestapi.models.generic_map import GenericMap  # noqa: F401,E501


class CrestBaseResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'size': 'int',
        'format': 'str',
        'datatype': 'str',
        'filter': 'GenericMap'
    }

    attribute_map = {
        'size': 'size',
        'format': 'format',
        'datatype': 'datatype',
        'filter': 'filter'
    }

    discriminator_value_class_map = {
        'IovSetDto': 'IovSetDto',
        'FolderSetDto': 'FolderSetDto',
        'TagSummarySetDto': 'TagSummarySetDto',
        'GlobalTagMapSetDto': 'GlobalTagMapSetDto',
        'TagSetDto': 'TagSetDto',
        'RunLumiSetDto': 'RunLumiSetDto',
        'GlobalTagSetDto': 'GlobalTagSetDto'
    }

    def __init__(self, size=None, format=None, datatype=None, filter=None):  # noqa: E501
        """CrestBaseResponse - a model defined in Swagger"""  # noqa: E501

        self._size = None
        self._format = None
        self._datatype = None
        self._filter = None
        self.discriminator = 'format'

        if size is not None:
            self.size = size
        self.format = format
        if datatype is not None:
            self.datatype = datatype
        if filter is not None:
            self.filter = filter

    @property
    def size(self):
        """Gets the size of this CrestBaseResponse.  # noqa: E501


        :return: The size of this CrestBaseResponse.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this CrestBaseResponse.


        :param size: The size of this CrestBaseResponse.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def format(self):
        """Gets the format of this CrestBaseResponse.  # noqa: E501


        :return: The format of this CrestBaseResponse.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this CrestBaseResponse.


        :param format: The format of this CrestBaseResponse.  # noqa: E501
        :type: str
        """
        if format is None:
            raise ValueError("Invalid value for `format`, must not be `None`")  # noqa: E501

        self._format = format

    @property
    def datatype(self):
        """Gets the datatype of this CrestBaseResponse.  # noqa: E501


        :return: The datatype of this CrestBaseResponse.  # noqa: E501
        :rtype: str
        """
        return self._datatype

    @datatype.setter
    def datatype(self, datatype):
        """Sets the datatype of this CrestBaseResponse.


        :param datatype: The datatype of this CrestBaseResponse.  # noqa: E501
        :type: str
        """

        self._datatype = datatype

    @property
    def filter(self):
        """Gets the filter of this CrestBaseResponse.  # noqa: E501


        :return: The filter of this CrestBaseResponse.  # noqa: E501
        :rtype: GenericMap
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this CrestBaseResponse.


        :param filter: The filter of this CrestBaseResponse.  # noqa: E501
        :type: GenericMap
        """

        self._filter = filter

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.discriminator]
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CrestBaseResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CrestBaseResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
