#!/usr/bin/env python
# encoding: utf-8
'''
utils.PayloadFileGenerator -- shortdesc

utils.PayloadFileGenerator is a description

It defines classes_and_methods

@author:     user_name

@copyright:  2017 organization_name. All rights reserved.

@license:    license

@contact:    user_email
@deffield    updated: Updated
'''

import sys
import os

from optparse import OptionParser

__all__ = []
__version__ = 0.1
__date__ = '2017-10-10'
__updated__ = '2017-10-10'

DEBUG = 0
TESTRUN = 0
PROFILE = 0

## Cool wrapper for CDMS

class PayloadFileGen(object):
    def __init__(self, size, nfiles, outfile):
        print ('Initialise PayloadFileGen...')
        self._size = size
        self._nfiles = nfiles
        self._outfile = outfile
        self._directory = 'none'

    def generate(self):
        self._directory = 'p%sKb' % self._size
        if not os.path.exists(self._directory):
            os.makedirs(self._directory)
    
        for nfile in range(0,self._nfiles):
            fname = '%s/%s_%d.blob' % (self._directory,self._outfile, nfile)
            print ('create file number %d' % nfile)

            with open(fname, 'wb') as fout:
                fout.write(os.urandom(self._size*1000)) # replace 1024 with size_kb if not unreasonably large

    def directory(self):
        return self._directory

def main(argv=None):
    '''Command line options.'''

    program_name = os.path.basename(sys.argv[0])
    program_version = "v0.1"
    program_build_date = "%s" % __updated__

    program_version_string = '%%prog %s (%s)' % (program_version, program_build_date)
    #program_usage = '''usage: spam two eggs''' # optional - will be autogenerated by optparse
    program_longdesc = '''''' # optional - give further explanation about what the program does
    program_license = "Copyright 2017 user_name (organization_name)                                            \
                Licensed under the Apache License 2.0\nhttp://www.apache.org/licenses/LICENSE-2.0"

    print ('Running file generation with options... %s' % sys.argv)
    if argv is None:
        argv = sys.argv[1:]
    try:
        # setup option parser
        parser = OptionParser(version=program_version_string, epilog=program_longdesc, description=program_license)
        parser.add_option("-i", "--in", dest="infile", help="set input path [default: %default]", metavar="FILE")
        parser.add_option("-o", "--out", dest="outfile", help="set output path [default: %default]", metavar="FILE")
        parser.add_option("-s", "--size", action="store", type="int", dest="size", help="set file size in Kb [default: %default]")
        parser.add_option("-n", "--nfiles", action="store", type="int", dest="nfiles", help="set number of files to generate [default: %default]")
        parser.add_option("-v", "--verbose", dest="verbose", action="count", help="set verbosity level [default: %default]")

        # set defaults
        parser.set_defaults(outfile="./out.txt", infile="./in.txt", size=10, nfiles=1)

        # process options
        (opts, args) = parser.parse_args(argv)

        if opts.verbose > 0:
            print("verbosity level = %d" % opts.verbose)
        if opts.infile:
            print("infile = %s" % opts.infile)
        if opts.outfile:
            print("outfile = %s" % opts.outfile)
        if opts.nfiles:
            print("nfiles = %s" % opts.nfiles)
        if opts.size:
            print("size (Kb) = %s" % opts.size)

        # MAIN BODY #
        pfg = PayloadFileGen(opts.size,opts.nfiles,opts.outfile)
        pfg.generate()
        
    except Exception as e:
        indent = len(program_name) * " "
        sys.stderr.write(program_name + ": " + repr(e) + "\n")
        sys.stderr.write(indent + "  for help use --help")
        return 2


if __name__ == "__main__":
    if DEBUG:
        sys.argv.append("-h")
    if TESTRUN:
        import doctest
        doctest.testmod()
    if PROFILE:
        import cProfile
        import pstats
        profile_filename = 'utils.PayloadFileGenerator_profile.txt'
        cProfile.run('main()', profile_filename)
        statsfile = open("profile_stats.txt", "wb")
        p = pstats.Stats(profile_filename, stream=statsfile)
        stats = p.strip_dirs().sort_stats('cumulative')
        stats.print_stats()
        statsfile.close()
        sys.exit(0)
        
        
    print ('Running program main...%s' % sys.argv)
    sys.exit(main())