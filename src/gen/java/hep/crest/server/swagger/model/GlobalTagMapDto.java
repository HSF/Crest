/*
 * CREST Server
 * OpenApi3 for CREST Server
 *
 * The version of the OpenAPI document: 5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package hep.crest.server.swagger.model;

import java.util.Objects;

import io.swagger.v3.oas.annotations.media.Schema;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.util.HashMap;
import java.math.BigDecimal;

import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;

/**
 * GlobalTagMapDto
 */
@JsonPropertyOrder({
  GlobalTagMapDto.JSON_PROPERTY_GLOBAL_TAG_NAME,
  GlobalTagMapDto.JSON_PROPERTY_RECORD,
  GlobalTagMapDto.JSON_PROPERTY_LABEL,
  GlobalTagMapDto.JSON_PROPERTY_TAG_NAME
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaJerseyServerCodegen")
public class GlobalTagMapDto   {
  public static final String JSON_PROPERTY_GLOBAL_TAG_NAME = "globalTagName";
  @JsonProperty(JSON_PROPERTY_GLOBAL_TAG_NAME)
  private String globalTagName;

  public static final String JSON_PROPERTY_RECORD = "record";
  @JsonProperty(JSON_PROPERTY_RECORD)
  private String record;

  public static final String JSON_PROPERTY_LABEL = "label";
  @JsonProperty(JSON_PROPERTY_LABEL)
  private String label;

  public static final String JSON_PROPERTY_TAG_NAME = "tagName";
  @JsonProperty(JSON_PROPERTY_TAG_NAME)
  private String tagName;

  public GlobalTagMapDto globalTagName(String globalTagName) {
    this.globalTagName = globalTagName;
    return this;
  }

  /**
   * Get globalTagName
   * @return globalTagName
   **/
  @JsonProperty(value = "globalTagName")
  
  public String getGlobalTagName() {
    return globalTagName;
  }

  public void setGlobalTagName(String globalTagName) {
    this.globalTagName = globalTagName;
  }

  public GlobalTagMapDto record(String record) {
    this.record = record;
    return this;
  }

  /**
   * Get record
   * @return record
   **/
  @JsonProperty(value = "record")
  
  public String getRecord() {
    return record;
  }

  public void setRecord(String record) {
    this.record = record;
  }

  public GlobalTagMapDto label(String label) {
    this.label = label;
    return this;
  }

  /**
   * Get label
   * @return label
   **/
  @JsonProperty(value = "label")
  
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }

  public GlobalTagMapDto tagName(String tagName) {
    this.tagName = tagName;
    return this;
  }

  /**
   * Get tagName
   * @return tagName
   **/
  @JsonProperty(value = "tagName")
  
  public String getTagName() {
    return tagName;
  }

  public void setTagName(String tagName) {
    this.tagName = tagName;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GlobalTagMapDto globalTagMapDto = (GlobalTagMapDto) o;
    return Objects.equals(globalTagName, globalTagMapDto.globalTagName) &&
        Objects.equals(record, globalTagMapDto.record) &&
        Objects.equals(label, globalTagMapDto.label) &&
        Objects.equals(tagName, globalTagMapDto.tagName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(globalTagName, record, label, tagName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GlobalTagMapDto {\n");
    
    sb.append("    globalTagName: ").append(toIndentedString(globalTagName)).append("\n");
    sb.append("    record: ").append(toIndentedString(record)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    tagName: ").append(toIndentedString(tagName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

