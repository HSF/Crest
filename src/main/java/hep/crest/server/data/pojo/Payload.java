package hep.crest.server.data.pojo;
// Generated Aug 2, 2016 3:50:25 PM by Hibernate Tools 3.2.2.GA

import hep.crest.server.config.DatabasePropertyConfigurator;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.experimental.Accessors;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.PrePersist;
import jakarta.persistence.Table;
import jakarta.persistence.Temporal;
import jakarta.persistence.TemporalType;
import jakarta.validation.constraints.NotNull;
import java.sql.Timestamp;
import java.time.Instant;
import java.util.Date;

/**
 * Payload generated by hbm2java.
 */
@Entity
@Table(name = "PAYLOAD", schema = DatabasePropertyConfigurator.SCHEMA_NAME)
// This object represents a Payload.
// Define default constructors.
@NoArgsConstructor
@Data
@Accessors(chain = true)
public class Payload {

    /**
     * The hash.
     */
    @Id
    @Column(name = "HASH", unique = true, nullable = false, length = 64)
    private String hash;

    /**
     * The version.
     */
    @Column(name = "VERSION", nullable = false, length = 20)
    private String version;

    /**
     * The object type.
     */
    @Column(name = "OBJECT_TYPE", nullable = false, length = 100)
    private String objectType;

    /**
     * The object name.
     */
    @Column(name = "OBJECT_NAME", nullable = false, length = 400)
    private String objectName = "none";

    /**
     * The size.
     */
    @Column(name = "DATA_SIZE", nullable = true)
    private Integer size;

    /**
     * The compression type.
     */
    @NotNull
    @Column(name = "COMPRESSION_TYPE")
    private String compressionType;

    /**
     * The checksum .
     */
    @NotNull
    @Column(name = "CHECK_SUM")
    private String checkSum = "SHA-256";

    /**
     * The insertion time.
     */
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "INSERTION_TIME", nullable = false, length = 11)
    private Date insertionTime;

    /**
     * Before saving the object.
     *
     * @return
     */
    @PrePersist
    public void prePersist() {
        if (this.insertionTime == null) {
            final Timestamp now = Timestamp.from(Instant.now());
            this.insertionTime = now;
        }
    }
}
