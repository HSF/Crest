package hep.crest.server.data.pojo;
// Generated Aug 2, 2016 3:50:25 PM by Hibernate Tools 3.2.2.GA

import hep.crest.server.config.DatabasePropertyConfigurator;
import jakarta.persistence.AttributeOverride;
import jakarta.persistence.EmbeddedId;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.UniqueConstraint;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;
import lombok.experimental.Accessors;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.PrePersist;
import jakarta.persistence.Table;

import java.sql.Timestamp;
import java.time.Instant;

/**
 * Iov generated by hbm2java.
 */
@Entity
@Table(name = "IOV", schema = DatabasePropertyConfigurator.SCHEMA_NAME, uniqueConstraints = {
        @UniqueConstraint(columnNames = { "TAG_NAME", "SINCE", "PAYLOAD_HASH" }) })
// This object represents an Iov.
// Define default constructors.
@Data
@Accessors(chain = true)
public class Iov implements java.io.Serializable {

    /**
     * Serializer.
     */
    private static final long serialVersionUID = 8775823880173022258L;
    /**
     * The Iov ID.
     * The since field represent a sort of a time.
     * The insertionTime field is used for history on the same since: when you overwrite
     * a since with a new payload the old one is still accessible via this time.
     */
    @EmbeddedId
    @AttributeOverride(name = "tagName",
            column = @Column(name = "TAG_NAME", nullable = false, length = 100))
    @AttributeOverride(name = "since",
            column = @Column(name = "SINCE", nullable = false, precision = 38, scale = 0))
    @AttributeOverride(name = "insertionTime",
            column = @Column(name = "INSERTION_TIME", nullable = false, length = 11))
    private IovId id;
    /**
     * The tag.
     * We exclude this field in equals and hashcode generated methods.
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "TAG_NAME", nullable = false, insertable = false, updatable = false)
    @EqualsAndHashCode.Exclude
    @ToString.Exclude
    private Tag tag;
    /**
     * The payload hash.
     */
    @Column(name = "PAYLOAD_HASH", nullable = false, length = 64)
    private String payloadHash;

    /**
     * Before insertion.
     *
     * @return
     */
    @PrePersist
    public void prePersist() {
        if (this.id.getInsertionTime() == null) {
            final Timestamp now = Timestamp.from(Instant.now());
            this.id.setInsertionTime(now);
        }
    }
}
