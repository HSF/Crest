package hep.crest.data.pojo;
// Generated Aug 2, 2016 3:50:25 PM by Hibernate Tools 3.2.2.GA

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.PrePersist;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import hep.crest.data.config.*;


/**
 * GlobalTag generated by hbm2java
 */
@Entity
@Table(name = "GLOBAL_TAG", schema = DatabasePropertyConfigurator.SCHEMA_NAME)
public class GlobalTag implements java.io.Serializable {

	/**
	* 
	*/
	private static final long serialVersionUID = 8514805080008025991L;
	private String name;
	private BigDecimal validity;
	private String description;
	private String release;
	private Date insertionTime;
	private Date snapshotTime;
	private String scenario;
	private String workflow;
	private char type;
	private Set<GlobalTagMap> globalTagMaps = new HashSet<>(0);

	public GlobalTag() {
	}

	public GlobalTag(String name) {
		this.name = name;
	}

	@Id
	@Column(name = "NAME", unique = true, nullable = false, length = 100)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "VALIDITY", nullable = false, precision = 38, scale = 0)
	public BigDecimal getValidity() {
		return this.validity;
	}

	public void setValidity(BigDecimal validity) {
		this.validity = validity;
	}

	@Column(name = "DESCRIPTION", nullable = false, length = 4000)
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Column(name = "RELEASE", nullable = false, length = 100)
	public String getRelease() {
		return this.release;
	}

	public void setRelease(String release) {
		this.release = release;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "INSERTION_TIME", nullable = false, length = 11)
	public Date getInsertionTime() {
		return this.insertionTime;
	}

	public void setInsertionTime(Date insertionTime) {
		this.insertionTime = insertionTime;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "SNAPSHOT_TIME", nullable = false, length = 11)
	public Date getSnapshotTime() {
		return this.snapshotTime;
	}

	public void setSnapshotTime(Date snapshotTime) {
		this.snapshotTime = snapshotTime;
	}

	@Column(name = "SCENARIO", nullable = false, length = 100)
	public String getScenario() {
		return this.scenario;
	}

	public void setScenario(String scenario) {
		this.scenario = scenario;
	}

	@Column(name = "WORKFLOW", nullable = false, length = 100)
	public String getWorkflow() {
		return this.workflow;
	}

	public void setWorkflow(String workflow) {
		this.workflow = workflow;
	}

	@Column(name = "TYPE", nullable = false, length = 1)
	public char getType() {
		return this.type;
	}

	public void setType(char type) {
		this.type = type;
	}

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "globalTag")
	public Set<GlobalTagMap> getGlobalTagMaps() {
		return this.globalTagMaps;
	}

	public void setGlobalTagMaps(Set<GlobalTagMap> globalTagMaps) {
		this.globalTagMaps = globalTagMaps;
	}

	@PrePersist
    public void prePersist() {
		if (this.insertionTime == null) {
			Timestamp now = new Timestamp(new Date().getTime());
			this.insertionTime = now;
		}
        if (this.snapshotTime == null) {
            Timestamp now = new Timestamp(new Date().getTime());
            this.snapshotTime = now;
        }
    }

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return "GlobalTag [name=" + name + ", validity=" + validity + ", description=" + description + ", release="
				+ release + ", insertionTime=" + insertionTime + ", snapshotTime=" + snapshotTime + ", scenario="
				+ scenario + ", workflow=" + workflow + ", type=" + type + "]";
	}

}
