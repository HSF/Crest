buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.0.1.RELEASE")
    }
}
plugins {
    id 'net.ltgt.apt' version '0.18'
    id 'net.ltgt.apt-eclipse' version '0.18'    
  	id 'checkstyle' 
}
description = 'JPA package for persistency'

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'eclipse-wtp'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

bootJar {
    baseName = 'crestdb-data'
  	version = '2.0-SNAPSHOT'
}

repositories {
    mavenCentral()
}

task checkCode {
  dependsOn 'checkstyleMain'
}

checkCode.doLast {
  println 'Code checked !'
}

checkstyleMain {
    setExcludes(new HashSet(['**/hep/crest/data/*/Q*java','src/gen/**','**/hep/crest/data/repositories/externals/*','**/hep/crest/swagger/**', '**/hep/crest/server/swagger/api/**']))
}

tasks.withType(Checkstyle) {
  checkstyleTest.enabled = false
  reports {
    xml.enabled false
    html.enabled true
  }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
////   	compile files("${project.rootDir}/jarlib/ojdbc7-12.1.0.2.jar")   
    annotationProcessor     'com.querydsl:querydsl-apt:4.2.1:jpa'
    annotationProcessor     'org.springframework.boot:spring-boot-starter-data-jpa' // needed because the query dsl annotation processor doesn't recognize javax.persistence.Entity
    compile                 group: 'com.querydsl', name: 'querydsl-jpa', version: querydsl_version

    compile ("org.springframework.boot:spring-boot-starter-data-jpa") 	
    compile group: 'org.apache.commons', name: 'commons-compress', version: '1.15'
    compile group: 'ma.glasnost.orika', name: 'orika-core', version: orika_version
    
	testCompile("org.springframework.boot:spring-boot-starter-test") 
}

jar {
    enabled = true
}
sourceSets {
	main {
		java {
		  srcDirs = ['src/main/java','src/gen/java','generated/java']
		}
	}
}

compileJava {
    options.compilerArgs << "-s"
    options.compilerArgs << "$projectDir/generated/java"

    doFirst {
    	// Remove the generated directory
        if ( file(new File(projectDir, "/generated")).exists() ) {
            file(new File(projectDir, "/generated")).deleteDir()
		}
        // make sure that directory exists
        file(new File(projectDir, "/generated/java")).mkdirs()
    }
}

clean.doLast {
    // clean-up directory when necessary
    file(new File(projectDir, "/generated")).deleteDir()
}

