variables:
    IMAGE: crest-service
    VERSION: 0.2
    REGISTRY: 'svomtest.svom.eu:5543'
#    REGISTRY: 'svomtest.svom.fr:5543'
    CONTAINER_IMAGE: $REGISTRY/$IMAGE:$VERSION
    WEB_CONTAINER_IMAGE: $REGISTRY/crest-ui:$VERSION
    GRADLE_OPTS: "-Dorg.gradle.daemon=false"
    GIT_SSL_NO_VERIFY: "true"
  # When using dind service we need to instruct docker, to talk with the
  # daemon started inside of the service. The daemon is available with
  # a network connection instead of the default /var/run/docker.sock socket.
  #
  # The 'docker' hostname is the alias of the service container as described at
  # https://docs.gitlab.com/ee/ci/docker/using_docker_images.html#accessing-the-services
  #
  # Note that if you're using Kubernetes executor, the variable should be set to
  # tcp://localhost:2375 because of how Kubernetes executor connects services
  # to the job container
#    DOCKER_HOST: tcp://docker:2375/
  # When using dind, it's wise to use the overlayfs driver for
  # improved performance.
#    DOCKER_DRIVER: overlay2

# Select a runner
# use tag keyword (see below)

#services:
#  - docker:dind


# Make the gradle wrapper executable. This essentially downloads a copy of
# Gradle to build the project with.
# https://docs.gradle.org/current/userguide/gradle_wrapper.html
# It is expected that any modern gradle project has a wrapper
before_script:
  - chmod +x gradlew

# We redirect the gradle user home using -g so that it caches the
# wrapper and dependencies.
# https://docs.gradle.org/current/userguide/gradle_command_line.html
#
# Unfortunately it also caches the build output so
# cleaning removes reminants of any cached builds.
# The assemble task actually builds the project.
# If it fails here, the tests can't run.
#build:
#  stage: build
#  script:
#    - ./gradlew -g /cache/.gradle clean :crestdb-web:assemble -PwarName=crest.war
#  allow_failure: false

# Use the generated build output to run the tests.
#test:
#  stage: test
#  script:
#    - ./gradlew -g /cache/.gradle check

stages:
 - package_application
 - build
 - webui
 - release
 - redeploy

package_svom_application:
  stage: package_application
  tags:
    - dc0
  image: java:8
  script:
   - ./gradlew -g /cache/.gradle clean assemble -PwarName=crest.war
  allow_failure: false
  artifacts:
    paths:
    - ./crestdb-web/build/libs/crest.war
    expire_in: 1 week
  only:
  - svom-dc0

build_svom_docker_image:
  stage: build
  environment: dc0
  tags:
    - dc0-shell
  image: java:8
  script:
    - docker info
    - docker build --tag=$CONTAINER_IMAGE .
  only:
  - svom-dc0

webui:
  stage: webui
  tags:
    - dc0-shell
  script:
    - docker info
    - docker build --tag=$WEB_CONTAINER_IMAGE ./web-ui/crest-ui/
  only:
  - svom-dc0

registry-push:
  stage: release
  environment: dc0
  tags:
    - dc0-shell
  script:
    - docker login -u svom -p $SVOMREGISTRYPSWD $REGISTRY
    - docker push $CONTAINER_IMAGE
    - docker push $WEB_CONTAINER_IMAGE
  only:
  - svom-dc0

package_cern_application:
  stage: package_application
  environment: cern
  only:
    refs:
      - master
    variables:
      - $REMOTE_NAME == "cern"
  image: java:8
  script:
   - ./gradlew -g /cache/.gradle clean assemble -PwarName=crest.war
  allow_failure: false
  artifacts:
   paths:
   - ./crestdb-web/build/libs/crest.war


build_cern_docker_image:
  stage: build
  environment: cern
  only:
    refs:
      - master
    variables:
      - $REMOTE_NAME == "cern"
  tags:
   - docker-image-build
  script: "echo building $CI_REGISTRY_IMAGE:runner" # No empty scripts are allowed
  variables:
   TO: $CI_REGISTRY_IMAGE:runner # Where to push resulting image

redeploy:
  stage: redeploy
  environment: cern
  only:
    refs:
      - master
    variables:
      - $REMOTE_NAME == "cern"
  image: gitlab-registry.cern.ch/paas-tools/openshift-client:latest
  script: "oc import-image $IMAGE_NAME  --server=$SERVER --namespace $NAMESPACE --all --token=$IMAGE_IMPORT_TOKEN"
