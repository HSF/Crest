{
	"swagger": "2.0",
	"info": {
		"version": "2.0",
		"title": "CrestDB REST API",
		"termsOfService": "http://svom.swagger.fr/terms/",
		"description": "Crest Rest Api to manage data for calibration files.",
		"contact": {
			"email": "andrea.formica@cern.ch"
		},
		"license": {
			"name": "Apache 2.0",
			"url": "http://www.apache.org/licenses/LICENSE-2.0.html"
		}
	},
	"host": "localhost:8080",
	"basePath": "/crest",
	"tags": [
		{
			"name": "iovs"
		},
		{
			"name": "payloads"
		},
		{
			"name": "admin"
		},
		{
			"name": "globaltags"
		},
		{
			"name": "globaltagmaps"
		},
		{
			"name": "tags"
		},
		{
			"name": "folders"
		},
		{
			"name": "runinfo"
		},
		{
			"name": "monitoring"
		},
		{
			"name": "fs"
		}
	],
	"schemes": [
		"http"
	],
	"paths": {
		"/admin/globaltags/{name}": {
			"put": {
				"tags": [
					"admin"
				],
				"summary": "Update a GlobalTag in the database.",
				"description": "This method allows to update a GlobalTag.Arguments: the name has to uniquely identify a global tag.",
				"operationId": "updateGlobalTag",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "name",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "A json string that is used to construct a GlobalTagDto object: { name: xxx, ... }",
						"required": true,
						"schema": {
							"$ref": "#/definitions/GlobalTagDto"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/GlobalTagDto"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"admin"
				],
				"summary": "Remove a GlobalTag from the database.",
				"description": "This method allows to remove a GlobalTag.Arguments: the name has to uniquely identify a global tag.",
				"operationId": "removeGlobalTag",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "name",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/admin/tags/{name}": {
			"delete": {
				"tags": [
					"admin"
				],
				"summary": "Remove a Tag from the database.",
				"description": "This method allows to remove a Tag.Arguments: the name has to uniquely identify a tag.",
				"operationId": "removeTag",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "name",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/fs/tar": {
			"post": {
				"tags": [
					"fs"
				],
				"summary": "Dump a tag into filesystem and retrieve the tar file asynchronously.",
				"description": "This method allows to request a tar file from the server using a tag specified in input.",
				"operationId": "buildTar",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json",
					"text/plain"
				],
				"parameters": [
					{
						"name": "tagname",
						"in": "query",
						"description": "tagname: the tag name {none}",
						"required": true,
						"type": "string",
						"default": "none"
					},
					{
						"name": "snapshot",
						"in": "query",
						"description": "snapshot: the snapshot time {0}",
						"required": true,
						"type": "integer",
						"default": 0,
						"format": "int64"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"type": "string"
						}
					}
				}
			}
		},
		"/monitoring/payloads": {
			"get": {
				"tags": [
					"monitoring"
				],
				"summary": "Retrieves monitoring information on payload as a list of PayloadTagInfoDtos.",
				"description": "This method allows to perform search and sorting.Arguments: by=<pattern>, page={ipage}, size={isize}, sort=<sortpattern>. The pattern <pattern> is in the form <param-name><operation><param-value>       <param-name> is the name of one of the fields in the dto       <operation> can be [< : >] ; for string use only [:]        <param-value> depends on the chosen parameter. A list of this criteria can be provided       using comma separated strings for <pattern>.      The pattern <sortpattern> is <field>:[DESC|ASC]",
				"operationId": "listPayloadTagInfo",
				"produces": [
					"application/json",
					"application/xml"
				],
				"parameters": [
					{
						"name": "tagname",
						"in": "query",
						"description": "tagname: the search pattern {none}",
						"required": false,
						"type": "string",
						"default": "none"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/PayloadTagInfoDto"
							}
						}
					}
				}
			}
		},
		"/folders": {
			"post": {
				"tags": [
					"folders"
				],
				"summary": "Create an entry for folder information.",
				"description": "Folder informations go into a dedicated table.",
				"operationId": "createFolder",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json",
					"text/plain"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "A json string that is used to construct a folderdto object: { node: xxx, ... }",
						"required": true,
						"schema": {
							"$ref": "#/definitions/FolderDto"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"type": "string"
						}
					}
				}
			},
			"get": {
				"tags": [
					"folders"
				],
				"summary": "Finds a FolderDto list.",
				"description": "This method allows to perform search and sorting.Arguments: by=<pattern>, sort=<sortpattern>. The pattern <pattern> is in the form <param-name><operation><param-value>       <param-name> is the name of one of the fields in the dto       <operation> can be [< : >] ; for string use only [:]        <param-value> depends on the chosen parameter. A list of this criteria can be provided       using comma separated strings for <pattern>.      The pattern <sortpattern> is <field>:[DESC|ASC]",
				"operationId": "listFolders",
				"produces": [
					"application/json",
					"application/xml"
				],
				"parameters": [
					{
						"name": "by",
						"in": "query",
						"description": "by: the search pattern {none}",
						"required": false,
						"type": "string",
						"default": "none"
					},
					{
						"name": "sort",
						"in": "query",
						"description": "sort: the sort pattern {nodeFullpath:ASC}",
						"required": false,
						"type": "string",
						"default": "nodeFullpath:ASC"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/FolderSetDto"
						}
					}
				}
			}
		},
		"/runinfo": {
			"post": {
				"tags": [
					"runinfo"
				],
				"summary": "Create an entry for run information.",
				"description": "Run informations go into a separate table.",
				"operationId": "createRunLumiInfo",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json",
					"text/plain"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "A json string that is used to construct a runlumiinfodto object: { run: xxx, ... }",
						"required": true,
						"schema": {
							"$ref": "#/definitions/RunLumiInfoDto"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"type": "string"
						}
					}
				}
			},
			"get": {
				"tags": [
					"runinfo"
				],
				"summary": "Finds a RunLumiInfoDto lists.",
				"description": "This method allows to perform search and sorting.Arguments: by=<pattern>, page={ipage}, size={isize}, sort=<sortpattern>. The pattern <pattern> is in the form <param-name><operation><param-value>       <param-name> is the name of one of the fields in the dto       <operation> can be [< : >] ; for string use only [:]        <param-value> depends on the chosen parameter. A list of this criteria can be provided       using comma separated strings for <pattern>.      The pattern <sortpattern> is <field>:[DESC|ASC]",
				"operationId": "listRunLumiInfo",
				"produces": [
					"application/json",
					"application/xml"
				],
				"parameters": [
					{
						"name": "by",
						"in": "query",
						"description": "by: the search pattern {none}",
						"required": false,
						"type": "string",
						"default": "none"
					},
					{
						"name": "page",
						"in": "query",
						"description": "page: the page number {0}",
						"required": false,
						"type": "integer",
						"default": 0,
						"format": "int32"
					},
					{
						"name": "size",
						"in": "query",
						"description": "size: the page size {1000}",
						"required": false,
						"type": "integer",
						"default": 1000,
						"format": "int32"
					},
					{
						"name": "sort",
						"in": "query",
						"description": "sort: the sort pattern {since:ASC}",
						"required": false,
						"type": "string",
						"default": "since:ASC"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/RunLumiSetDto"
						}
					}
				}
			}
		},
		"/runinfo/list": {
			"get": {
				"tags": [
					"runinfo"
				],
				"summary": "Finds a RunLumiInfoDto lists using parameters.",
				"description": "This method allows to perform search.Arguments: from=<someformat>,to=<someformat>, format=<describe previous types>, page={ipage}, size={isize}, sort=<sortpattern>. The pattern <pattern> is in the form <param-name><operation><param-value>       <param-name> is the name of one of the fields in the dto       <operation> can be [< : >] ; for string use only [:]        <param-value> depends on the chosen parameter. A list of this criteria can be provided       using comma separated strings for <pattern>.      The pattern <sortpattern> is <field>:[DESC|ASC]",
				"operationId": "findRunLumiInfo",
				"produces": [
					"application/json",
					"application/xml"
				],
				"parameters": [
					{
						"name": "from",
						"in": "query",
						"description": "from: the starting time or run-lumi",
						"required": false,
						"type": "string",
						"default": "none"
					},
					{
						"name": "to",
						"in": "query",
						"description": "to: the ending time or run-lumi",
						"required": false,
						"type": "string",
						"default": "none"
					},
					{
						"name": "format",
						"in": "query",
						"description": "format: the format to digest previous arguments [time] or [run-lumi]. Time = yyyymmddhhmiss, Run-lumi = run-lumi",
						"required": false,
						"type": "string",
						"default": "time"
					},
					{
						"name": "page",
						"in": "query",
						"description": "page: the page number {0}",
						"required": false,
						"type": "integer",
						"default": 0,
						"format": "int32"
					},
					{
						"name": "size",
						"in": "query",
						"description": "size: the page size {1000}",
						"required": false,
						"type": "integer",
						"default": 1000,
						"format": "int32"
					},
					{
						"name": "sort",
						"in": "query",
						"description": "sort: the sort pattern {since:ASC}",
						"required": false,
						"type": "string",
						"default": "since:ASC"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/RunLumiInfoDto"
							}
						}
					}
				}
			}
		},
		"/globaltagmaps": {
			"post": {
				"tags": [
					"globaltagmaps"
				],
				"summary": "Create a GlobalTagMap in the database.",
				"description": "This method allows to insert a GlobalTag.Arguments: GlobalTagMapDto should be provided in the body as a JSON file.",
				"operationId": "createGlobalTagMap",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "A json string that is used to construct a globaltagmapdto object: { globaltagname: xxx, ... }",
						"required": true,
						"schema": {
							"$ref": "#/definitions/GlobalTagMapDto"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/GlobalTagMapDto"
						}
					}
				}
			}
		},
		"/globaltagmaps/{name}": {
			"get": {
				"tags": [
					"globaltagmaps"
				],
				"summary": "Find GlobalTagMapDto lists.",
				"description": "This method search for mappings using the global tag name.",
				"operationId": "findGlobalTagMap",
				"produces": [
					"application/json",
					"application/xml"
				],
				"parameters": [
					{
						"in": "header",
						"name": "X-Crest-MapMode",
						"description": "If the mode is BackTrace then it will search for global tags containing the tag <name>",
						"default": "Trace",
						"type": "string"
					},
					{
						"name": "name",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/GlobalTagMapSetDto"
						}
					}
				}
			}
		},
		"/globaltags": {
			"get": {
				"tags": [
					"globaltags"
				],
				"summary": "Finds a GlobalTagDtos lists.",
				"description": "This method allows to perform search and sorting.Arguments: by=<pattern>, page={ipage}, size={isize}, sort=<sortpattern>. The pattern <pattern> is in the form <param-name><operation><param-value>       <param-name> is the name of one of the fields in the dto       <operation> can be [< : >] ; for string use only [:]        <param-value> depends on the chosen parameter. A list of this criteria can be provided       using comma separated strings for <pattern>.      The pattern <sortpattern> is <field>:[DESC|ASC]",
				"operationId": "listGlobalTags",
				"produces": [
					"application/json",
					"application/xml"
				],
				"parameters": [
					{
						"name": "by",
						"in": "query",
						"description": "by: the search pattern {none}",
						"required": false,
						"type": "string",
						"default": "none"
					},
					{
						"name": "page",
						"in": "query",
						"description": "page: the page number {0}",
						"required": false,
						"type": "integer",
						"default": 0,
						"format": "int32"
					},
					{
						"name": "size",
						"in": "query",
						"description": "size: the page size {1000}",
						"required": false,
						"type": "integer",
						"default": 1000,
						"format": "int32"
					},
					{
						"name": "sort",
						"in": "query",
						"description": "sort: the sort pattern {name:ASC}",
						"required": false,
						"type": "string",
						"default": "name:ASC"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/GlobalTagSetDto"
						}
					}
				}
			},
			"post": {
				"tags": [
					"globaltags"
				],
				"summary": "Create a GlobalTag in the database.",
				"description": "This method allows to insert a GlobalTag.Arguments: GlobalTagDto should be provided in the body as a JSON file.",
				"operationId": "createGlobalTag",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "A json string that is used to construct a globaltagdto object: { name: xxx, ... }",
						"required": true,
						"schema": {
							"$ref": "#/definitions/GlobalTagDto"
						}
					},
					{
						"name": "force",
						"in": "query",
						"description": "force: tell the server if it should use or not the insertion time provided {default: false}",
						"required": false,
						"type": "string",
						"default": "false"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/GlobalTagDto"
						}
					}
				}
			}
		},
		"/globaltags/{name}": {
			"get": {
				"tags": [
					"globaltags"
				],
				"summary": "Finds a GlobalTagDto by name",
				"description": "This method will search for a global tag with the given name. Only one global tag should be returned.",
				"operationId": "findGlobalTag",
				"produces": [
					"application/json",
					"application/xml"
				],
				"parameters": [
					{
						"name": "name",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/GlobalTagDto"
						}
					}
				}
			}
		},
		"/globaltags/{name}/tags": {
			"get": {
				"tags": [
					"globaltags"
				],
				"summary": "Finds a TagDtos lists associated to the global tag name in input.",
				"description": "This method allows to trace a global tag.Arguments: record=<record> filter output by record, label=<label> filter output by label",
				"operationId": "findGlobalTagFetchTags",
				"produces": [
					"application/json",
					"application/xml"
				],
				"parameters": [
					{
						"name": "name",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "record",
						"in": "query",
						"description": "record:  the record string {}",
						"required": false,
						"type": "string",
					    "default": "none"
					},
					{
						"name": "label",
						"in": "query",
						"description": "label:  the label string {}",
						"required": false,
						"type": "string",
					    "default": "none"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/TagSetDto"
						}
					}
				}
			}
		},
		"/iovs": {
			"get": {
				"tags": [
					"iovs"
				],
				"summary": "Finds a IovDtos lists.",
				"description": "This method allows to perform search by tagname and sorting.Arguments: tagname={a tag name}, page={ipage}, size={isize},      sort=<pattern>, where pattern is <field>:[DESC|ASC]",
				"operationId": "findAllIovs",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "by",
						"in": "query",
						"description": "you need a mandatory tagname:xxxx. Additional field can be since or insertionTime rules.",
						"required": true,
						"type": "string",
						"default": "none"
					},
					{
						"name": "page",
						"in": "query",
						"description": "page: the page number {0}",
						"required": false,
						"type": "integer",
						"default": 0,
						"format": "int32"
					},
					{
						"name": "size",
						"in": "query",
						"description": "size: the page size {10000}",
						"required": false,
						"type": "integer",
						"default": 10000,
						"format": "int32"
					},
					{
						"name": "sort",
						"in": "query",
						"description": "sort: the sort pattern {id.since:ASC}",
						"required": false,
						"type": "string",
						"default": "id.since:ASC"
					},
					{
						"in": "header",
						"name": "dateformat",
						"description": "The format of the input time fields: {yyyyMMdd'T'HHmmssX | ms} DEFAULT: ms (so it is a long). Used for insertionTime comparaison.",
						"default": "ms",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/IovSetDto"
						}
					}
				}
			},
			"post": {
				"tags": [
					"iovs"
				],
				"summary": "Create a Iov in the database.",
				"description": "This method allows to insert a Iov.Arguments: IovDto should be provided in the body as a JSON file.",
				"operationId": "createIov",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "A json string that is used to construct a iovdto object: { name: xxx, ... }",
						"required": true,
						"schema": {
							"$ref": "#/definitions/IovDto"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/IovDto"
						}
					}
				}
			}
		},
		"/iovs/storebatch": {
			"post": {
				"tags": [
					"iovs"
				],
				"summary": "Create many IOVs in the database, associated to a tag name.",
				"description": "This method allows to insert multiple IOVs. Arguments: tagname,end time.",
				"operationId": "storeBatchIovMultiForm",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "A json string that is used to construct a IovSetDto object.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/IovSetDto"
						}
					}
				],
				"responses": {
					"201": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/IovSetDto"
						}
					}
				}
			}
		},
		"/iovs/getSize": {
			"get": {
				"tags": [
					"iovs"
				],
				"summary": "Get the number o iovs for the given tag.",
				"description": "This method allows to select the count of iovs in a tag. Also possible to get the size of snapshot, if the time added.Arguments: tagname={a tag name}, snapshotTime={snapshot time in milliseconds (Long) from epoch}",
				"operationId": "getSize",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "tagname",
						"in": "query",
						"description": "tagname: the tag name {none}",
						"required": true,
						"type": "string",
						"default": "none"
					},
					{
						"name": "snapshot",
						"in": "query",
						"description": "snapshot: the snapshot time {0}",
						"required": false,
						"type": "integer",
						"default": 0,
						"format": "int64"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/CrestBaseResponse"
						}
					}
				}
			}
		},
		"/iovs/getSizeByTag": {
			"get": {
				"tags": [
					"iovs"
				],
				"summary": "Get the number o iovs for tags matching pattern.",
				"description": "This method allows to select the count of iovs in a tag. Also possible to get the size of snapshot, if the time is added. Arguments: tagname={a tag name}",
				"operationId": "getSizeByTag",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "tagname",
						"in": "query",
						"description": "tagname: the tag name {none}",
						"required": true,
						"type": "string",
						"default": "none"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/TagSummarySetDto"
						}
					}
				}
			}
		},
		"/iovs/selectGroups": {
			"get": {
				"tags": [
					"iovs"
				],
				"summary": "Select groups for a given tagname.",
				"description": "This method allows to select a list of groups.Arguments: tagname={a tag name}, snapshot={snapshot time as long}",
				"operationId": "selectGroups",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "tagname",
						"in": "query",
						"description": "tagname: the tag name {none}",
						"required": true,
						"type": "string",
						"default": "none"
					},
					{
						"name": "snapshot",
						"in": "query",
						"description": "snapshot: the snapshot time {0}",
						"required": false,
						"type": "integer",
						"default": 0,
						"format": "int64"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/IovSetDto"
						}
					}
				}
			}
		},
		"/iovs/selectIovs": {
			"get": {
				"tags": [
					"iovs"
				],
				"summary": "Select iovs for a given tagname and in a given range.",
				"description": "This method allows to select a list of iovs in a tag, using a given range in time and (optionally) for a given snapshot time.Arguments: tagname={a tag name}, since={since time as string}, until={until time as string}, snapshot={snapshot time as long}",
				"operationId": "selectIovs",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "tagname",
						"in": "query",
						"description": "tagname: the tag name {none}",
						"required": false,
						"type": "string",
						"default": "none"
					},
					{
						"name": "since",
						"in": "query",
						"description": "since: the since time as a string {0}",
						"required": false,
						"type": "string",
						"default": "0"
					},
					{
						"name": "until",
						"in": "query",
						"description": "until: the until time as a string {INF}",
						"required": false,
						"type": "string",
						"default": "INF"
					},
					{
						"name": "snapshot",
						"in": "query",
						"description": "snapshot: the snapshot time {0}",
						"required": false,
						"type": "integer",
						"default": 0,
						"format": "int64"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/IovSetDto"
						}
					}
				}
			}
		},
		"/iovs/lastIov": {
			"get": {
				"tags": [
					"iovs"
				],
				"summary": "Select last iov for a given tagname and before a given since.",
				"description": "This method allows to select the last iov in a tag, before a given time and (optionally) for a given snapshot time.Arguments: tagname={a tag name}, since={since time as string}, snapshot={snapshot time as long}",
				"operationId": "lastIov",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "tagname",
						"in": "query",
						"description": "tagname: the tag name {none}",
						"required": false,
						"type": "string",
						"default": "none"
					},
					{
						"name": "since",
						"in": "query",
						"description": "since: the since time ",
						"required": false,
						"type": "string",
						"default": "now"
					},
					{
						"name": "snapshot",
						"in": "query",
						"description": "snapshot: the snapshot time {0}",
						"required": false,
						"type": "integer",
						"default": 0,
						"format": "int64"
					},
					{
						"in": "header",
						"name": "dateformat",
						"description": "The format of the input time fields: {yyyyMMdd'T'HHmmssX | ms} DEFAULT: ms (so it is a long). Used for insertionTime comparaison.",
						"default": "ms",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/IovSetDto"
						}
					}
				}
			}
		},
		"/iovs/selectSnapshot": {
			"get": {
				"tags": [
					"iovs"
				],
				"summary": "Select snapshot for a given tagname and insertion time.",
				"description": "This method allows to select a list of all iovs in a tag, using (optionally) a given snapshot time.Arguments: tagname={a tag name}, snapshot={snapshot time as long}",
				"operationId": "selectSnapshot",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "tagname",
						"in": "query",
						"description": "tagname: the tag name {none}",
						"required": true,
						"type": "string",
						"default": "none"
					},
					{
						"name": "snapshot",
						"in": "query",
						"description": "snapshot: the snapshot time {0}",
						"required": true,
						"type": "integer",
						"default": 0,
						"format": "int64"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/IovSetDto"
						}
					}
				}
			}
		},
		"/payloads": {
			"post": {
				"tags": [
					"payloads"
				],
				"summary": "Create a Payload in the database.",
				"description": "This method allows to insert a Payload.Arguments: PayloadDto should be provided in the body as a JSON file.",
				"operationId": "createPayload",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "A json string that is used to construct a iovdto object: { name: xxx, ... }",
						"required": true,
						"schema": {
							"$ref": "#/definitions/PayloadDto"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/PayloadDto"
						}
					}
				}
			}
		},
		"/payloads/upload": {
			"post": {
				"tags": [
					"payloads"
				],
				"summary": "Create a Payload in the database.",
				"description": "This method allows to insert a Payload.Arguments: PayloadDto should be provided in the body as a JSON file.",
				"operationId": "createPayloadMultiForm",
				"consumes": [
					"multipart/form-data"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "file",
						"in": "formData",
						"description": "The file",
						"required": true,
						"type": "file"
					},
					{
						"name": "payload",
						"in": "formData",
						"description": "Json body for payloaddto",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/PayloadDto"
						}
					}
				}
			}
		},
		"/payloads/store": {
			"post": {
				"tags": [
					"payloads"
				],
				"summary": "Create a Payload in the database, associated to a given iov since and tag name.",
				"description": "This method allows to insert a Payload and an IOV. Arguments: since,tagname,stream,end time. The header parameter X-Crest-PayloadFormat can be : JSON (default) or TXT or BLOB",
				"operationId": "storePayloadWithIovMultiForm",
				"consumes": [
					"multipart/form-data"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "header",
						"name": "X-Crest-PayloadFormat",
						"description": "The format of the input data",
						"default": "JSON",
						"type": "string"
					},
					{
						"name": "file",
						"in": "formData",
						"description": "The payload file as a stream",
						"required": true,
						"type": "file"
					},
					{
						"name": "tag",
						"in": "formData",
						"description": "The tag name",
						"required": true,
						"type": "string"
					},
					{
						"name": "since",
						"in": "formData",
						"description": "The since time",
						"required": true,
						"type": "number"
					},
					{
						"name": "endtime",
						"in": "formData",
						"description": "The end time to be used for protection at tag level",
						"required": false,
						"type": "number"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/HTTPResponse"
						}
					}
				}
			}
		},
		"/payloads/uploadbatch": {
			"post": {
				"tags": [
					"payloads"
				],
				"summary": "Create many Payloads in the database, associated to a given iov since list and tag name.",
				"description": "This method allows to insert a Payload and an IOV. Arguments: tagname,stream,end time. The header parameter X-Crest-PayloadFormat can be : JSON (default) or TXT or BLOB",
				"operationId": "uploadPayloadBatchWithIovMultiForm",
				"consumes": [
					"multipart/form-data"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "header",
						"name": "X-Crest-PayloadFormat",
						"description": "The format of the input data",
						"default": "FILE",
						"type": "string"
					},
					{
						"name": "files",
						"in": "formData",
						"description": "The files to upload",
						"required": true,
						"type": "file"
					},
					{
						"name": "tag",
						"in": "formData",
						"description": "The tag name",
						"required": true,
						"type": "string"
					},
					{
						"name": "iovsetupload",
						"in": "formData",
						"required": true,
						"type" : "string"
					},
					{
						"name": "endtime",
						"in": "formData",
						"description": "The end time to be used for protection at tag level",
						"required": false,
						"type": "number"
					}
				],
				"responses": {
					"201": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/IovSetDto"
						}
					}
				}
			}
		},
		"/payloads/storebatch": {
			"post": {
				"tags": [
					"payloads"
				],
				"summary": "Create many Payloads in the database, associated to a given iov since list and tag name.",
				"description": "This method allows to insert a Payload and an IOV. Arguments: tagname,stream,end time. The header parameter X-Crest-PayloadFormat can be : JSON (default) or TXT or BLOB",
				"operationId": "storePayloadBatchWithIovMultiForm",
				"consumes": [
					"multipart/form-data"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "header",
						"name": "X-Crest-PayloadFormat",
						"description": "The format of the input data",
						"default": "JSON",
						"type": "string"
					},
					{
						"name": "tag",
						"in": "formData",
						"description": "The tag name",
						"required": true,
						"type": "string"
					},
					{
						"name": "iovsetupload",
						"in": "formData",
						"required": true,
						"type" : "string"
					},
					{
						"name": "endtime",
						"in": "formData",
						"description": "The end time to be used for protection at tag level",
						"required": false,
						"type": "number"
					}
				],
				"responses": {
					"201": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/IovSetDto"
						}
					}
				}
			}
		},
		"/payloads/{hash}": {
			"get": {
				"tags": [
					"payloads"
				],
				"summary": "Finds a payload resource associated to the hash.",
				"description": "This method retrieves a payload resource.Arguments: hash=<hash> the hash of the payload",
				"operationId": "getPayload",
				"produces": [
					"application/octet-stream",
					"application/json",
					"application/xml"
				],
				"parameters": [
					{
						"in": "header",
						"name": "X-Crest-PayloadFormat",
						"description": "The format of the output data. The header parameter X-Crest-PayloadFormat can be : BLOB (default) or DTO (in JSON format).",
						"default": "BLOB",
						"type": "string"
					},
					{
						"name": "hash",
						"in": "path",
						"description": "hash:  the hash of the payload",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"type": "string"
						}
					}
				}
			}
		},
		"/payloads/{hash}/meta": {
			"get": {
				"tags": [
					"payloads"
				],
				"summary": "Finds a payload resource associated to the hash.",
				"description": "This method retrieves metadata of the payload resource.Arguments: hash=<hash> the hash of the payload",
				"operationId": "getPayloadMetaInfo",
				"produces": [
					"application/json",
					"application/xml"
				],
				"parameters": [
					{
						"name": "hash",
						"in": "path",
						"description": "hash:  the hash of the payload",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/PayloadDto"
						}
					}
				}
			}
		},
		"/tags": {
			"get": {
				"tags": [
					"tags"
				],
				"summary": "Finds a TagDtos lists.",
				"description": "This method allows to perform search and sorting.Arguments: by=<pattern>, page={ipage}, size={isize}, sort=<sortpattern>. The pattern <pattern> is in the form <param-name><operation><param-value>       <param-name> is the name of one of the fields in the dto       <operation> can be [< : >] ; for string use only [:]        <param-value> depends on the chosen parameter. A list of this criteria can be provided       using comma separated strings for <pattern>.      The pattern <sortpattern> is <field>:[DESC|ASC]",
				"operationId": "listTags",
				"produces": [
					"application/json",
					"application/xml"
				],
				"parameters": [
					{
						"name": "by",
						"in": "query",
						"description": "by: the search pattern {none}",
						"required": false,
						"type": "string",
						"default": "none"
					},
					{
						"name": "page",
						"in": "query",
						"description": "page: the page number {0}",
						"required": false,
						"type": "integer",
						"default": 0,
						"format": "int32"
					},
					{
						"name": "size",
						"in": "query",
						"description": "size: the page size {1000}",
						"required": false,
						"type": "integer",
						"default": 1000,
						"format": "int32"
					},
					{
						"name": "sort",
						"in": "query",
						"description": "sort: the sort pattern {name:ASC}",
						"required": false,
						"type": "string",
						"default": "name:ASC"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/TagSetDto"
						}
					}
				}
			},
			"post": {
				"tags": [
					"tags"
				],
				"summary": "Create a Tag in the database.",
				"description": "This method allows to insert a Tag.Arguments: TagDto should be provided in the body as a JSON file.",
				"operationId": "createTag",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "A json string that is used to construct a tagdto object: { name: xxx, ... }",
						"required": true,
						"schema": {
							"$ref": "#/definitions/TagDto"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/TagDto"
						}
					}
				}
			}
		},
		"/tags/{name}": {
			"get": {
				"tags": [
					"tags"
				],
				"summary": "Finds a TagDto by name",
				"description": "This method will search for a tag with the given name. Only one tag should be returned.",
				"operationId": "findTag",
				"produces": [
					"application/json",
					"application/xml"
				],
				"parameters": [
					{
						"name": "name",
						"in": "path",
						"description": "name: the tag name",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/TagSetDto"
						}
					}
				}
			},
			"put": {
				"tags": [
					"tags"
				],
				"summary": "Update a TagDto by name",
				"description": "This method will search for a tag with the given name, and update its content for the provided body fields. Only the following fields can be updated: description, timeType, objectTime, endOfValidity, lastValidatedTime.",
				"operationId": "updateTag",
				"produces": [
					"application/json",
					"application/xml"
				],
				"parameters": [
					{
						"name": "name",
						"in": "path",
						"description": "name: the tag name",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "A json string that is used to construct a map of updatable fields: { description: xxx, ... }",
						"required": true,
						"schema": {
							"$ref": "#/definitions/GenericMap"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/TagDto"
						}
					}
				}
			}
		}
	},
	"definitions": {
			"HTTPResponse": {
				"description": "general response object that can be used for POST and PUT methods",
				"type": "object",
				"required": [
					"message",
					"action",
					"code"
				],
				"properties": {
					"message": {
						"type": "string"
					},
					"action": {
						"type": "string",
						"description": "Action performed by the server"
					},
					"code": {
						"type": "integer",
						"description": "Code of the response"
					},
					"id": {
						"type": "string",
						"description": "Can be used to store the ID of the generated object"
					}
				}
			},
			"CrestBaseResponse": {
				"type": "object",
				"discriminator" : "format",
				"required": [
					"format"
				],
				"properties": {
					"size": {
						"type": "integer",
						"format": "int64"
					},
					"format" : {
						"type": "string"
					},
					"datatype": {
						"type": "string"
					},
					"filter": {
						"$ref": "#/definitions/GenericMap"
					}
				}
			},
			"GenericMap": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string"
					}
				},
				"additionalProperties": {
					"type": "string"
				}
			},
			"FolderDto": {
				"type": "object",
				"properties": {
					"nodeFullpath": {
						"type": "string"
					},
					"schemaName": {
						"type": "string"
					},
					"nodeName": {
						"type": "string"
					},
					"nodeDescription": {
						"type": "string"
					},
					"tagPattern": {
						"type": "string"
					},
					"groupRole": {
						"type": "string"
					}
				}
			},
			"PayloadTagInfoDto": {
				"type": "object",
				"properties": {
					"tagname": {
						"type": "string"
					},
					"niovs": {
						"type": "integer"
					},
					"totvolume": {
						"type": "number",
						"format": "float"
					},
					"avgvolume": {
						"type": "number",
						"format": "float"
					}
				}
			},
			"RunLumiInfoDto": {
				"type": "object",
				"properties": {
					"since": {
						"type": "number"
					},
					"run": {
						"type": "number"
					},
					"lb": {
						"type": "number"
					},
					"starttime": {
						"type": "number"
					},
					"endtime": {
						"type": "number"
					}
				}
			},
			"GlobalTagMapDto": {
				"type": "object",
				"properties": {
					"globalTagName": {
						"type": "string"
					},
					"record": {
						"type": "string"
					},
					"label": {
						"type": "string"
					},
					"tagName": {
						"type": "string"
					}
				}
			},
			"GlobalTagDto": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string"
					},
					"validity": {
						"type": "number"
					},
					"description": {
						"type": "string"
					},
					"release": {
						"type": "string"
					},
					"insertionTime": {
						"type": "string",
						"format": "date-time"
					},
					"snapshotTime": {
						"type": "string",
						"format": "date-time"
					},
					"scenario": {
						"type": "string"
					},
					"workflow": {
						"type": "string"
					},
					"type": {
						"type": "string"
					},
					"snapshotTimeMilli": {
						"type": "integer",
						"format": "int64"
					},
					"insertionTimeMilli": {
						"type": "integer",
						"format": "int64"
					}
				}
			},
			"TagSummaryDto": {
				"type": "object",
				"properties": {
					"tagname": {
						"type": "string"
					},
					"niovs": {
						"type": "integer",
						"format": "int64"
					}
				}
			},
			"GroupDto": {
				"type": "object",
				"properties": {
					"groups": {
						"type": "array",
						"items": {
							"type": "number"
						}
					}
				}
			},
			"TagDto": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string"
					},
					"timeType": {
						"type": "string"
					},
					"payloadSpec": {
						"type": "string"
					},
					"synchronization": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"lastValidatedTime": {
						"type": "number"
					},
					"endOfValidity": {
						"type": "number"
					},
					"insertionTime": {
						"type": "string",
						"format": "date-time"
					},
					"modificationTime": {
						"type": "string",
						"format": "date-time"
					}
				}
			},
			"IovDto": {
				"type": "object",
				"required": [
					"since",
					"payloadHash"
				],
				"properties": {
					"tagName": {
						"type": "string"
					},
					"since": {
						"type": "number"
					},
					"insertionTime": {
						"type": "string",
						"format": "date-time"
					},
					"payloadHash": {
						"type": "string"
					}
				}
			},
			"IovPayloadDto": {
				"type": "object",
				"properties": {
					"since": {
						"type": "number"
					},
					"payload": {
						"type": "string"
					}
				}
			},
			"TagSummarySetDto": {
				"description" : "An Set containing TagSummaryDto objects.",
				"allOf": [
					{
						"$ref": "#/definitions/CrestBaseResponse"
					},
					{
						"properties": {
							"format" : {
								"type": "string",
								"default" : "TagSummarySetDto"
							},
							"resources": {
								"type": "array",
								"items": {
								"$ref": "#/definitions/TagSummaryDto"
								}
							}
						}
					}
				]
			},
			"IovSetDto": {
				"description" : "An Set containing IovDto objects.",
				"allOf": [
					{
						"$ref": "#/definitions/CrestBaseResponse"
					},
					{
						"properties": {
							"format" : {
								"type": "string",
								"default" : "IovSetDto"
							},
							"resources": {
								"type": "array",
								"items": {
									"$ref": "#/definitions/IovDto"
								}
							}
						}
					}
				]
			},
			"IovPyldSetDto": {
				"description" : "An Set containing IovPayloadDto objects.",
				"allOf": [
					{
						"$ref": "#/definitions/CrestBaseResponse"
					},
					{
						"properties": {
							"format" : {
								"type": "string",
								"default" : "IovPyldSetDto"
							},
							"resources": {
								"type": "array",
								"items": {
									"$ref": "#/definitions/IovPayloadDto"
								}
							}
						}
					}
				]
			},
			"TagSetDto": {
				"description" : "An Set containing TagDto objects.",
				"allOf": [
					{
						"$ref": "#/definitions/CrestBaseResponse"
					},
					{
						"properties": {
							"format" : {
								"type": "string",
								"default" : "TagSetDto"
							},
							"resources": {
								"type": "array",
								"items": {
									"$ref": "#/definitions/TagDto"
								}
							}
						}
					}
				]
			},
			"PayloadSetDto": {
				"description" : "An Set containing PayloadDto objects.",
				"allOf": [
					{
						"$ref": "#/definitions/CrestBaseResponse"
					},
					{
						"properties": {
							"format" : {
								"type": "string",
								"default" : "PayloadSetDto"
							},
							"resources": {
								"type": "array",
								"items": {
									"$ref": "#/definitions/PayloadDto"
								}
							}
						}
					}
				]
			},
			"GlobalTagMapSetDto": {
				"description" : "An GlobalTagMapSet containing GlobalTagMapDto objects.",
				"allOf": [
					{
						"$ref": "#/definitions/CrestBaseResponse"
					},
					{
						"properties": {
							"format" : {
								"type": "string",
								"default" : "GlobalTagMapSetDto"
							},
							"resources": {
								"type": "array",
								"items": {
									"$ref": "#/definitions/GlobalTagMapDto"
								}
							}
						}
					}
				]
			},
			"GlobalTagSetDto": {
				"description" : "An GlobalTagSet containing GlobalTagDto objects.",
				"allOf": [
					{
						"$ref": "#/definitions/CrestBaseResponse"
					},
					{
						"properties": {
							"format" : {
								"type": "string",
								"default" : "GlobalTagSetDto"
							},
							"resources": {
								"type": "array",
								"items": {
									"$ref": "#/definitions/GlobalTagDto"
								}
							}
						}
					}
				]
			},
			"FolderSetDto": {
				"description" : "An FolderSet containing FolderDto objects.",
				"allOf": [
					{
						"$ref": "#/definitions/CrestBaseResponse"
					},
					{
						"properties": {
							"resources": {
								"type": "array",
								"items": {
									"$ref": "#/definitions/FolderDto"
								}
							}
						}
					}
				]
			},
			"RunLumiSetDto": {
				"description" : "An RunLumiSet containing RunLumiInfoDto objects.",
				"allOf": [
					{
						"$ref": "#/definitions/CrestBaseResponse"
					},
					{
						"properties": {
							"resources": {
								"type": "array",
								"items": {
									"$ref": "#/definitions/RunLumiInfoDto"
								}
							}
						}
					}
				]
			},
			"PayloadDto": {
				"type": "object",
				"properties": {
					"hash": {
						"type": "string"
					},
					"version": {
						"type": "string"
					},
					"objectType": {
						"type": "string"
					},
					"size": {
						"type": "integer",
						"format": "int32"
					},
					"data": {
						"type": "string",
						"format": "byte"
					},
					"streamerInfo": {
						"type": "string",
						"format": "byte"
					},
					"insertionTime": {
						"type": "string",
						"format": "date-time"
					}
				}
			}
		}
	}
}
